/*
 * Installer.java
 *
 * Created on 25.02.2010, 13:19:29
 */

/*
 *  SalSSuite - Suite of programmes for managing a SalS project
 *  Copyright (C) 2011  Jannis Limperg <jannis[dot]limperg[at]arcor[dot]de>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package salssuite.util.gui;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import salssuite.util.Constants;
import salssuite.util.Passwords;

/**
 * The SalSSuite installer. This class lets the user specify the
 * programme directory and general password. When the user has done so, all the
 * contents of the directory from which the installer is launched are moved into
 * the generated programme directory and a file called <code>install</code> is
 * generated which contains the chosen password.
 * <p>
 * The install file is located in the programme directory entered by the user.
 * It contains as the first line a hash for the password the user entered
 * before installing. The install file can be processed using the usual methods
 * from {@link salssuite.util.Passwords}.
 * <p>
 * The installer saves the programme directory in
 * {@link salssuite.util.Constants#installerNode} so that the {@link Uninstaller} can use
 * this node to determine the directory.
 * @author Jannis Limperg
 * @version 1.0
 * @see salssuite.server.Server
 */
public class Installer extends javax.swing.JFrame {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor.
     */
    public Installer() {
        initComponents();
        setLocation(300, 300);
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pathDisplay = new javax.swing.JLabel();
        pathChooserButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel6 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SalSSuite Installer");

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 18));
        jLabel1.setText("SalSSuite Installer");

        jLabel2.setText("Dieser Installer wird den Server und alle Clients der SalSSuite auf Ihrem Rechner installieren.");

        jLabel3.setText("Bitte füllen Sie alle Felder aus und klicken Sie dann auf Installieren.");

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel4.setText("Programmpfad");

        pathChooserButton.setText("Durchsuchen");
        pathChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chosePath(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel5.setText("Passwort");

        jPasswordField1.setToolTipText("Das Passwort, das für alle Module des Servers voreingestellt wird. Die Passwörter für einzelne Module können später geändert werden.");
        jPasswordField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAllHandler(evt);
            }
        });

        jLabel6.setText("wiederholen");

        jPasswordField2.setToolTipText("Das gewählte Passwort wiederholen.");

        jButton1.setText("Installieren");
        jButton1.setToolTipText("Installiert die SalSSuite");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                install(evt);
            }
        });

        jButton2.setText("Abbrechen");
        jButton2.setToolTipText("Installation abbrechen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pathDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pathChooserButton, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 449, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPasswordField1, jPasswordField2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pathDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pathChooserButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chosePath(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chosePath

        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(false);
        chooser.setDialogTitle("SalSSuite-Installer - Installationspfad wählen");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int option = chooser.showDialog(this, "Wählen");

        if(option != JFileChooser.APPROVE_OPTION)
            return;

        programmeDir = chooser.getSelectedFile();
        pathDisplay.setText(programmeDir.getAbsolutePath());
        pack();
    }//GEN-LAST:event_chosePath

    private void install(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_install
        
        //check input
        if(!parsePassword())
            return;

        if(programmeDir == null) {
            JOptionPane.showMessageDialog(this, "Bitte Installationspfad angeben.",
                    "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //get the current working directory
        File workingDir = null;
        try {
            workingDir = new File(salssuite.util.gui.Installer.class
                    .getProtectionDomain().getCodeSource().getLocation().toURI()).
                    getParentFile();
        } catch (URISyntaxException ex) {
            new ExceptionDisplayDialog(this, true, ex, "FEHLER: KONNTE EXEKUTIONS" +
                    "VERZEICHNIS NICHT BESTIMMEN").setVisible(true);
            System.exit(1);
        }

        if(workingDir == null) {
            JOptionPane.showMessageDialog(this, "Konnte Exekutionsverzeichnis nicht" +
                    " bestimmen.", "Fataler Fehler", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }

        //move all the files in this directory into the programmeDir
        for(File fileOrDir : workingDir.listFiles()) {

            //if it's the installer file itself
            if(fileOrDir.equals(new File(workingDir, "/installer.jar")))
                continue;

            //else
            try {
                moveAll(fileOrDir, programmeDir);
            }
            catch(IOException e) {
                new ExceptionDisplayDialog(this, true, e, "FEHLER BEIM VER" +
                        "SCHIEBEN DER DATEN").setVisible(true);
                return;
            }
        }

        //generate the install-file
        File installFile = new File(programmeDir, "/install");

        PrintWriter out;

        try {
            installFile.getParentFile().mkdirs();
            installFile.createNewFile();
            out = new PrintWriter(new FileWriter(installFile));

            out.println(password);
            out.flush();
            out.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Konnte Installationsdatei nicht" +
                    "anlegen.", "Schwerer Fehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //store install directory in the installer node for use with the uninstaller
        Constants.installerNode.put("programmeDir", programmeDir.getAbsolutePath());

        //everything went fine, exit
        JOptionPane.showMessageDialog(this, "Installation erfolgreich. Sie können" +
                " den Server nun starten.", "Erfolg", JOptionPane.INFORMATION_MESSAGE);
        System.exit(0);
    }//GEN-LAST:event_install

    private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
        System.exit(0);
    }//GEN-LAST:event_cancel

    private void selectAllHandler(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectAllHandler
        try {
            ((JTextField)evt.getSource()).selectAll();
        }
        catch(Exception e) {}
    }//GEN-LAST:event_selectAllHandler

   /**
    * Creates a new installer and displays it. Note that the directory in
    * which the installer is located must contain all the source files, which
    * are then put into the specified programme directory. The structure of
    * the directory where <code>Installer.jar</code> is located
    * must mirror the intended directory structure.
    * @param args Command line arguments are not supported.
    */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {

        } catch (InstantiationException ex) {

        } catch (IllegalAccessException ex) {

        } catch (UnsupportedLookAndFeelException ex) {
            
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Installer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JButton pathChooserButton;
    private javax.swing.JLabel pathDisplay;
    // End of variables declaration//GEN-END:variables

    //==========================================================================
    //================================OWN CODE==================================


    //==================================FIELDS==================================

    //the password hash
    String password;

    File programmeDir = null;

    //=================================METHODS==================================

    //Parses the password. Returns true if successfull, false if an error occured.
    //Also turns the password into a hash.
    private boolean parsePassword() {

        String newPw = new String(jPasswordField1.getPassword());
        String newPw2 = new String(jPasswordField2.getPassword());

        if(!newPw.equals(newPw2)) {
            JOptionPane.showMessageDialog(this, "Passworte stimmen nicht" +
                    " überein.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        try {
            password = Passwords.encryptPassword(newPw);
        }
        catch(java.security.NoSuchAlgorithmException e) {
            JOptionPane.showMessageDialog(this, "Konnte Verschlüsselungsalgo" +
                    "rithmus nicht laden.", "Schwerer Fehler", JOptionPane.
                    ERROR_MESSAGE);
            return false;
        }
        return true;
    }//end parsePassword()

    
    //Moves a file or directory to the specified target directory.
    private void moveAll(File original, File target) throws IOException {

        if(!target.exists())
            target.mkdirs();

        if(!target.isDirectory())
            throw new IOException("Target directory is not a directory: "+
                    target.getAbsolutePath());


        boolean success = original.renameTo(new File(target, original.getName()));
        if(!success) {
            JOptionPane.showMessageDialog(this, "Konnte Dateien nicht verschieben.",
                    "Fehler bei der Installation", JOptionPane.ERROR_MESSAGE);
        }

    }//end moveAll()
}
