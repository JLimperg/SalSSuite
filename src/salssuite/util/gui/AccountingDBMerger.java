/*
 * AccountingDBMerger.java
 *
 * Created on 15.12.2010, 22:31:27
 */

package salssuite.util.gui;

import java.io.File;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.apache.derby.drda.NetworkServerControl;
import salssuite.util.Util;

/**
 * Standalone programme that lets the user merge two accounting tables. More precisely,
 * all values from the 'accounting' and 'accounting_categories' tables of the
 * source database are inserted into the 'accounting' and 'accounting_categories'
 * tables of the target database. Note that it is assumed
 * that all tables into which data should be copied are already present and
 * that all belong to the "DBUSER" schema. This should be the case if the
 * database was created by the <code>Server</code> for a standard project.
 * <p>
 * The merger programme uses builtin export and import functions of the
 * Derby network server. It therefore requires some disk space, but its amount
 * should usually not be critical.
 * <p>
 * This programme is not part of the standard server-client-programmes but
 * rather a utility tool.
 * @author Jannis Limperg
 * @see salssuite.server.module.AccountingModule#buildDatabase
 */
public class AccountingDBMerger extends javax.swing.JFrame {

    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     */
    public AccountingDBMerger() {
        initComponents();
        setLocation(200, 200);
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sourceDBLabel = new javax.swing.JLabel();
        targetDBLabel = new javax.swing.JLabel();
        choseSourcePathButton = new javax.swing.JButton();
        choseTargetPathButton = new javax.swing.JButton();
        mergeButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SalSSuite - Finanzdatenbanken zusammenführen");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setText("Quelldatenbank");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel2.setText("Zieldatenbank");

        sourceDBLabel.setText("Bitte Ordner wählen");

        targetDBLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        targetDBLabel.setText("Bitte Ordner wählen");

        choseSourcePathButton.setText("Durchsuchen");
        choseSourcePathButton.setToolTipText("Den Quelldatenbank-Ordner wählen.");
        choseSourcePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSourceDBPath(evt);
            }
        });

        choseTargetPathButton.setText("Durchsuchen");
        choseTargetPathButton.setToolTipText("Den Zieldatenbank-Ordner wählen.");
        choseTargetPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooserTargetDBPath(evt);
            }
        });

        mergeButton.setText("Daten übertragen");
        mergeButton.setToolTipText("Buchhaltungs-Daten von der Quell- in die Zieldatenbank übertragen");
        mergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merge(evt);
            }
        });

        jLabel3.setText("<html><center>Die Datenbank-Ordner sind normalerweise [SalSSuite-Installationsverzeichnis]/Projekte/[Projekt]/Datenbanken/general</center></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sourceDBLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(targetDBLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(choseSourcePathButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 550, Short.MAX_VALUE)
                                .addComponent(choseTargetPathButton))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mergeButton)
                        .addGap(318, 318, 318))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sourceDBLabel, targetDBLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceDBLabel)
                    .addComponent(targetDBLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choseSourcePathButton)
                    .addComponent(choseTargetPathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mergeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseSourceDBPath(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSourceDBPath
        File path = showFileChooser("Quelldatenbank wählen");
        if(path == null)
            return;
        sourceFolder = path;
        sourceDBLabel.setText(Util.adjustStringLength(path.getAbsolutePath(),
                40));
    }//GEN-LAST:event_chooseSourceDBPath

    private void chooserTargetDBPath(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooserTargetDBPath
        File path = showFileChooser("Zieldatenbank wählen");
        if(path == null)
            return;
        targetFolder = path;
        targetDBLabel.setText(Util.adjustStringLength(path.getAbsolutePath(),
                40));
    }//GEN-LAST:event_chooserTargetDBPath

    //Note that the builtin derby functions seem to be case-sensitive about
    //everything, so give all paramteters in capital letters when using these
    //functions.
    private void merge(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merge

        //test if pathes are set correctly
        if(sourceFolder == null || targetFolder == null) {
            JOptionPane.showMessageDialog(this, "Bitte Quell- und Zieldatenbank"
                    + " angeben.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //---------------------------SOURCE-----------------------------------\\


        //in these two files we will store the temporary data of the accounting
        //and accounting_categories tables respectively
        File accountingExportFile;
        File accountingCategoriesExportFile;

        try {
            accountingExportFile = File.createTempFile("Accounting-DB", ".csv");
            accountingCategoriesExportFile = File.createTempFile(
                        "AccountingCategories-DB", ".csv");
            accountingExportFile.deleteOnExit();
            accountingCategoriesExportFile.deleteOnExit();
            
            //Deletion is necessary because the derby routine used for export
            //won't export to existing files. We just need the pathes.
            accountingExportFile.delete();
            accountingCategoriesExportFile.delete();
        }
        catch(java.io.IOException e) {
            JOptionPane.showMessageDialog(this, "<html>Konnte temporäre Dateien für"
                    + " das Zwischenspeichern der Daten nicht erstellen.<p>"
                    + "Fehlermeldung: "+e.getMessage()+"</html>");
            return;
        }

        try {
            //start Derby server for source database
            System.setProperty("derby.system.home", sourceFolder.getParentFile().
                    getAbsolutePath());
            
            NetworkServerControl dbserver = new NetworkServerControl(
                InetAddress.getByName("0.0.0.0"),
                PORT);
            dbserver.start(null);

            //connect to it
            Connection dbcon = DriverManager.getConnection("jdbc:derby://localhost:" +
                    PORT +
                    "/"+sourceFolder.getName()+";");
            Statement stmt = dbcon.createStatement();

            //export the data
            stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE "+
                "('DBUSER','ACCOUNTING','"+
                accountingExportFile.getAbsolutePath()+
                "',null,null,null)");

            stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE "+
                "('DBUSER','ACCOUNTING_CATEGORIES','"+
                accountingCategoriesExportFile.getAbsolutePath()+
                "',null,null,null)");

            //shutdown source db server
            try {
                DriverManager.getConnection("jdbc:derby:;" +
                        "shutdown=true;");
                dbserver.shutdown();
            }
                catch(SQLException e) {
            }
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "<html>Konnte Daten nicht aus"
                    + " der Quelldatenbank lesen.<p>Fehlermeldung: "+e.getMessage()
                    +"</html>",
                    "Schwerer Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        
        //---------------------------TARGET-----------------------------------\\
        
        try {
            //start Derby server for target database
            System.setProperty("derby.system.home", targetFolder.getParentFile().
                    getAbsolutePath());

            NetworkServerControl dbserver = new NetworkServerControl(
                InetAddress.getByName("0.0.0.0"),
                PORT);
            dbserver.start(null);

            //connect to it
            Connection dbcon = DriverManager.getConnection("jdbc:derby://localhost:" +
                    PORT +
                    "/"+targetFolder.getName()+";");
            Statement stmt = dbcon.createStatement();

            //import the data from the export files
            stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_IMPORT_DATA"+
                "('DBUSER','ACCOUNTING','DESCRIPTION,DATE,TIME,INCOME,"
                + "OUTGO,CATEGORY','2,3,4,5,6,7','"+
                accountingExportFile.getAbsolutePath()+
                "',null,null,null,0)");

            stmt.executeUpdate("CALL SYSCS_UTIL.SYSCS_IMPORT_DATA"+
                "('DBUSER','ACCOUNTING_CATEGORIES',null,null,'"+
                accountingCategoriesExportFile.getAbsolutePath()+
                "',null,null,null,0)");

            //shutdown derby server
            try {
                DriverManager.getConnection("jdbc:derby:;" +
                        "shutdown=true;");
                dbserver.shutdown();
            }
                catch(SQLException e) {
            }
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(this, "<html>Konnte Daten nicht in"
                    + " die Zieldatenbank schreiben.<p>Fehlermeldung: "+e.getMessage()
                    +"</html>",
                    "Schwerer Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //print success message
        JOptionPane.showMessageDialog(this, "Daten übertragen.", "Erfolg",
                JOptionPane.INFORMATION_MESSAGE);

        //bye
        System.exit(0);
    }//GEN-LAST:event_merge

    /**
     * Creates an <code>AccountingDBMerger</code> and displays it.
     * @param args Command line arguments are not supported.
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {}

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountingDBMerger().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton choseSourcePathButton;
    private javax.swing.JButton choseTargetPathButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton mergeButton;
    private javax.swing.JLabel sourceDBLabel;
    private javax.swing.JLabel targetDBLabel;
    // End of variables declaration//GEN-END:variables


    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    /**
     * The port this programme uses to start the Derby database server.
     */
    public static final int PORT = 46789;

    //===============================FIELDS===================================//

    File sourceFolder;
    File targetFolder;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Utility method. Shows the user a customised <code>JFileChooser</code> to let them
     * choose a database path.
     * @return The chosen database path, or null if cancelled.
     */
    private File showFileChooser(String title) {

        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle(title);
        chooser.setMultiSelectionEnabled(false);

        int option = chooser.showOpenDialog(this);

        if(option == JFileChooser.APPROVE_OPTION)
            return chooser.getSelectedFile();
        else
            return null;
    }

    //============================INNER CLASSES===============================//
}
