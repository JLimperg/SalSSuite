/*
 * MagazineClientOrdersPanel.java
 *
 * Created on 27.06.2010, 13:22:25
 */

package salssuite.clients.magazine;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.TreeMap;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import salssuite.util.gui.FilterPanel;
import salssuite.util.Util;

/**
 * Panel to create, modify or delete orders. This panel is part of the
 * {@link MagazineClient} and responsible for order management.
 * <p>
 * Note that individual orders are managed by {@link MagazineClientOrderPanel}s.
 * These permit the user to modify and delete orders. This panel is merely
 * responsible for keeping the list of <code>MagazineClientOrderPanel</code>s
 * up to date and adding new orders.
 * @author Jannis Limperg
 * @see salssuite.server.module.MagazineModule
 */
public class MagazineClientOrdersPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     * @param client The client this panel is part of.
     * @throws IllegalArgumentException if <code>client</code> is <code>null</code>.
     */
    public MagazineClientOrdersPanel(MagazineClient client) {

        if(client == null)
            throw new IllegalArgumentException("Client may not be null.");

        this.client = client;

        //try to connect to the database
        try {
            stmt = client.getDatabaseConnection().createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Konnte nicht mit der " +
                    "Datenbank verbinden. Beende die Anwendung.", "Kritischer" +
                    " Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(1);
            return;
        }
        
        initComponents();

        jScrollPane1.getVerticalScrollBar().setUnitIncrement(30);

        //set up filter panel
        try {
            filterPanel = new FilterPanel(client,
                    (int)filterDummyPanel.getPreferredSize().getWidth(),
                    client.getDatabaseConnection(),
                    new String[] {"id"},
                    "orders",
                    "ID",
                    new String[] {}, //string fields
                    new String[] {"id", "companyId"}, //number fields
                    new String[] {"date"}, //date fields
                    new String[] {}, //string field descr
                    new String[] {"Best.-Nr.", "Firma Nr."}, //number field descr
                    new String[] {"Best.-Datum"}  //date field descr
            );
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Konnte Verbindung mit der" +
                    " Datenbank nicht herstellen. Beende die Anwendung.",
                    "Kritischer Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(1);
            return;
        }


        filterDummyPanel.setLayout(new java.awt.BorderLayout());
        filterDummyPanel.add(filterPanel, java.awt.BorderLayout.CENTER);

        filterPanel.addActionListener(new ActionListener() {
           public void actionPerformed(ActionEvent evt) {
               updateList();
           }
        });

        filterPanel.clearFilters();
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        newOrderButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        filterDummyPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        onlyNotpaidFilter = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(730, 430));

        newOrderButton.setText("Neue Bestellung");
        newOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrderButtonPressed(evt);
            }
        });

        refreshButton.setText("Aktualisieren");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOrders(evt);
            }
        });

        filterDummyPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout filterDummyPanelLayout = new javax.swing.GroupLayout(filterDummyPanel);
        filterDummyPanel.setLayout(filterDummyPanelLayout);
        filterDummyPanelLayout.setHorizontalGroup(
            filterDummyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 808, Short.MAX_VALUE)
        );
        filterDummyPanelLayout.setVerticalGroup(
            filterDummyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 106, Short.MAX_VALUE)
        );

        mainPanel.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane1.setViewportView(mainPanel);

        onlyNotpaidFilter.setText("zeige nur nicht Bezahlte");
        onlyNotpaidFilter.setToolTipText("Wenn aktiviert werden nur nicht bezahlte Bestellungen angezeigt.");
        onlyNotpaidFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOrders(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 505, Short.MAX_VALUE)
                .addComponent(newOrderButton)
                .addContainerGap())
            .addComponent(filterDummyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(602, Short.MAX_VALUE)
                .addComponent(onlyNotpaidFilter)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 808, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(onlyNotpaidFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterDummyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newOrderButton)
                    .addComponent(refreshButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateOrders(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOrders
        updateOrders();
    }//GEN-LAST:event_updateOrders

    private void newOrderButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrderButtonPressed

        //ask user for company number
        int companyNumber = -1;
        
        do {
            String userInput = JOptionPane.showInputDialog(client, "ID der " +
                    "bestellenden Firma:");

            if(userInput == null) //user cancelled
                return;

            try {
                companyNumber = Integer.parseInt(userInput);
                ResultSet company = stmt.executeQuery("SELECT id FROM companies" +
                        " WHERE id = "+companyNumber);
                if(!company.next()) {
                    JOptionPane.showMessageDialog(client, "Keine Firma mit dieser" +
                            " ID bekannt.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                break;
            }
            catch(NumberFormatException e) {continue;}
            catch(SQLException e) {
                JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation "
                        + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return;
            }
        } while(true);

        //add new order
        try {
            stmt.executeUpdate("INSERT INTO orders (companyId, date, time) VALUES ("+
                    companyNumber+", '"+Util.getDateString()+"', '"+
                    Util.getTimeString()+"')");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    " mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        filterPanel.clearFilters();

        //ensure new order is visible
        javax.swing.JScrollBar vertScrollBar = jScrollPane1.getVerticalScrollBar();
        vertScrollBar.setValues(
                vertScrollBar.getMaximum(),
                vertScrollBar.getVisibleAmount(),
                vertScrollBar.getMinimum(),
                vertScrollBar.getMaximum());
    }//GEN-LAST:event_newOrderButtonPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel filterDummyPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton newOrderButton;
    private javax.swing.JCheckBox onlyNotpaidFilter;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables


    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    TreeMap<Integer, MagazineClientOrderPanel> orderPanels = new TreeMap<Integer,
            MagazineClientOrderPanel>();

    MagazineClient client;
    Statement stmt;
    FilterPanel filterPanel;


    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Updates the list of orders.
     */
    private void updateOrders() {
        filterPanel.clearFilters();
    }

    /**
     * Updates the visual representation of the orders.
     */
    private void updateList() {

        //remove all order panels
        mainPanel.removeAll();
        orderPanels = new TreeMap<Integer, MagazineClientOrderPanel>();

        //construct data for new orders    
        ResultSet visibleOrdersIDs = filterPanel.getFilteredData();
        
        try {
            while(visibleOrdersIDs.next()) {

                int orderID = visibleOrdersIDs.getInt("id");
                int companyID;

                ResultSet order;
                order = stmt.executeQuery("SELECT companyId, paid FROM orders" +
                        " WHERE id = "+orderID);
                order.next();

                //if the user wants to see only those orders that are not paid yet:
                if(onlyNotpaidFilter.isSelected() && order.getInt("paid") == 1)
                    continue;

                companyID = order.getInt("companyId");

                MagazineClientOrderPanel panel = new MagazineClientOrderPanel(client,
                        orderID, companyID);
                panel.setBorder(BorderFactory.createLineBorder(java.awt.Color.BLACK, 2));

                orderPanels.put(orderID, panel);
                mainPanel.add(panel);
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    " mit der Datenbank.", "Netzwerkfehler", JOptionPane.
                    ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        validate();
        mainPanel.repaint();
    }
    //============================INNER CLASSES===============================//

    
}
