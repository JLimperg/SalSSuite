/*
 * MagazineClientWarePanel.java
 *
 * Created on 05.06.2010, 14:17:43
 */

package salssuite.clients.magazine;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import salssuite.util.Util;
import salssuite.util.gui.FilterPanel;
import salssuite.util.gui.ProgressDialog;

/**
 * Panel to manage the list of wares available at the magazine. Provides direct
 * access to all the data stored in the 'goods' database table. Wares can be
 * created, deleted, and modified using a {@link WareEditingDialog}.
 * <p>
 * For the properties of each ware, see
 * {@link salssuite.server.module.MagazineModule#buildDatabase}.
 * @author Jannis Limperg
 * @see MagazineClient
 * @see salssuite.server.module.MagazineModule
 */
public class MagazineClientWarePanel extends javax.swing.JPanel {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor.
     * @param client The client this panel is part of.
     */
    public MagazineClientWarePanel(MagazineClient client){
        initComponents();

        this.client = client;
        tableModel = (DefaultTableModel)table.getModel();

        
        try {
            //connect to the client
            stmt = client.getDatabaseConnection().createStatement();
        

            //setup filter panel
            filterPanel = new FilterPanel(client,
                    (int)filterPanelPlaceholder.getPreferredSize().getWidth(),
                    client.getDatabaseConnection(),
                    new String[] {"*"},
                    "goods",
                    "id",
                    new String[] {"name", "seller"}, //string fields
                    new String[] {"id", "realPrice", "fictivePrice", "available"}, //number fields
                    new String[] {}, //date fields
                    new String[] {"Bezeichnung", "Händler"}, //string field descr
                    new String[] {"ID", "Preis(€)", "Preis(Staat)", "vorhanden"}, //number field descr
                    new String[] {}  //date field descr
            );
                        
            filterPanel.addActionListener(new ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    filterEntered();
                }
            });
            filterPanelPlaceholder.setLayout(new BorderLayout());
            filterPanelPlaceholder.add(filterPanel, BorderLayout.CENTER);

            //fetch data
            updateTableModel(filterPanel.getFilteredData());
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Konnte nicht mit der" +
                    "Datenbank verbinden. Beende die Anwendung.",
                    "Kritischer Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(1);
            return;
        }
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "serial"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        filterPanelPlaceholder = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        newWareButton = new javax.swing.JButton();
        editWareButton = new javax.swing.JButton();
        deleteWareButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(730, 630));

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(666, 234));

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Bezeichnung", "Einheit", "vorhanden", "bestellt", "Preis (Staat)", "Preis (€)", "Händler"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout filterPanelPlaceholderLayout = new javax.swing.GroupLayout(filterPanelPlaceholder);
        filterPanelPlaceholder.setLayout(filterPanelPlaceholderLayout);
        filterPanelPlaceholderLayout.setHorizontalGroup(
            filterPanelPlaceholderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        filterPanelPlaceholderLayout.setVerticalGroup(
            filterPanelPlaceholderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 91, Short.MAX_VALUE)
        );

        refreshButton.setText("Aktualisieren");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        newWareButton.setText("Neue Ware");
        newWareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewWare(evt);
            }
        });

        editWareButton.setText("Ware bearbeiten");
        editWareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editWare(evt);
            }
        });

        deleteWareButton.setText("Ware löschen");
        deleteWareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteWare(evt);
            }
        });

        jButton1.setText("Warenliste erstellen");
        jButton1.setToolTipText("Speichert eine Warenliste im CSV-Format.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateWareList(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newWareButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editWareButton)
                .addGap(18, 18, 18)
                .addComponent(deleteWareButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(refreshButton)
                .addContainerGap())
            .addComponent(filterPanelPlaceholder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanelPlaceholder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newWareButton)
                    .addComponent(editWareButton)
                    .addComponent(deleteWareButton)
                    .addComponent(refreshButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        filterPanel.clearFilters();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void createNewWare(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewWare
        //show dialog to create new ware
        int option = WareEditingDialog.showWareEditingDialog(client,
                client.getDatabaseConnection(), -1);

        //if the user has cancelled:
        if(option < 0)
            return;

        //if not, update table model
        try {
            ResultSet newWare = stmt.executeQuery("SELECT * FROM goods"
                    + " WHERE ID = (SELECT MAX(ID) FROM goods)");
            newWare.next();
            tableModel.addRow(buildTableRowData(newWare));
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //scroll down to the new ware
        table.changeSelection(table.getRowCount()-1, 0, false, false);
    }//GEN-LAST:event_createNewWare

    private void editWare(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editWare
        //get selected ware
        int row = table.getSelectedRow();
        if(row < 0)
            return;

        int ID = (Integer)tableModel.getValueAt(row, 0);

        //let user edit ware
        WareEditingDialog.showWareEditingDialog(client,
                client.getDatabaseConnection(), ID);

        //Note that the WareEditingClient automatically checks if the
        //ware has been changed by another user.

        //update table model
        try {
            ResultSet editedWare = stmt.executeQuery("SELECT * FROM goods"
                    + " WHERE ID = "+ID);
            editedWare.next();
            tableModel.removeRow(row);
            tableModel.insertRow(row, buildTableRowData(editedWare));
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_editWare

    private void deleteWare(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteWare

        //get ID of selected ware
        int row = table.getSelectedRow();
        if(row < 0)
            return;

        int ID = (Integer)tableModel.getValueAt(row, 0);
        
        try {
            //Check whether this row has been altered by another user in the meantime;
            //if so: refute to remove and refresh the data.
            ResultSet ware = stmt.executeQuery("SELECT * FROM goods WHERE"
                    + " id = "+ID);
            if(!ware.next()) {
                JOptionPane.showMessageDialog(getTopLevelAncestor(), "Die Ware wurde bereits"
                        + " von einem anderen Nutzer gelöscht.", "Information",
                        JOptionPane.INFORMATION_MESSAGE);
                tableModel.removeRow(row);
                return;
            }

            if(hasTableDataChanged(row)) {
                JOptionPane.showMessageDialog(getTopLevelAncestor(), "<html>Die Ware"
                        + " wurde zwischenzeitlich von einem anderen Nutzer"
                        + " geändert.<br/> Aktualisiere die Daten...</html>",
                        "Warnung",
                        JOptionPane.WARNING_MESSAGE);
                filterPanel.clearFilters();
                table.changeSelection(row, 0, false, false);
                return;
            }

            //check whether it is ordered; if so: refute to remove
            ResultSet orderedWare = stmt.executeQuery("SELECT (orderId) FROM " +
                    "orderParts WHERE wareId = "+ID);
            if(orderedWare.next()) {
                JOptionPane.showMessageDialog(client, "<html>Die Ware kann nicht " +
                        "entfernt werden, da sie von mindestens einer Bestellung " +
                        "referenziert wird.<p>Bitte betreffende Bestellung(en)" +
                        " löschen.</html>", "Datenfehler", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //if not: remove it
            stmt.executeUpdate("DELETE FROM goods WHERE id = "+ID);
            //and update the table model
            tableModel.removeRow(row);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    " mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_deleteWare

    private void generateWareList(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateWareList

        //ask the user for a file in which to store the list
        File destFile;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Csv-Dateien",
                "csv"));
        fileChooser.setDialogTitle("Betriebsliste speichern");
        int option = fileChooser.showSaveDialog(getTopLevelAncestor());
        if(option != JFileChooser.APPROVE_OPTION)
            return;
        destFile = fileChooser.getSelectedFile();

        //open the file and print the header
        PrintWriter out;
        try {
            out = new PrintWriter(new java.io.FileWriter(destFile));
            out.println("\"Nummer\",\"Bezeichnung\",\"Einheit\",\"Preis (Staat)\","
                    + "\"Preis (€)\",\"Händler\"");
            out.flush();
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(getTopLevelAncestor(), "Konnte gewählte"
                    + "Datei nicht öffnen.", "Dateifehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //print the data
        try {
            ProgressDialog dia = ProgressDialog.showProgressDialog(
                    (java.awt.Frame)getTopLevelAncestor(),
                    false, JDialog.DISPOSE_ON_CLOSE, true, "Schreibe Daten...");

            ResultSet data = stmt.executeQuery("SELECT id, name, packageSize,"
                    + "packageName, packageUnit, seller, realPrice, fictivePrice"
                    + " FROM goods");
            
            while(data.next()) {
                String line = "";
                line += data.getString("id") + ",\"";
                line += data.getString("name") + "\",\"";
                line += data.getString("packageName") + " (" +
                        data.getString("packageSize") + " " +
                        data.getString("packageUnit") + ")\",";
                line += data.getString("fictivePrice") + ",";
                line += data.getString("realPrice") + ",\"";
                line += data.getString("seller") + "\"";
                out.println(line);
            }

            dia.dispose();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(getTopLevelAncestor(), "Datenbankfehler"
                    + "beim Schreiben der Daten.", "Dateifehler",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //flush and close
        out.flush();
        out.close();
    }//GEN-LAST:event_generateWareList


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteWareButton;
    private javax.swing.JButton editWareButton;
    private javax.swing.JPanel filterPanelPlaceholder;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newWareButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables


    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    MagazineClient client;
    Statement stmt;
    DefaultTableModel tableModel;

    FilterPanel filterPanel;

    //==============================METHODS===================================//

    /**
     * Is called whenever the user enters a filter using the FilterPanel. The
     * goods list is then updated accordingly by this method.
     */
    private void filterEntered() {
        updateTableModel(filterPanel.getFilteredData());
    }
    

    /**
     * Updates the table model to reflect the given list of wares.
     * @param wares A ResultSet storing all data about all wares that should
     * be displayed.
     */
    private void updateTableModel(ResultSet wares) {

        //clear model
        tableModel.setRowCount(0);


        //construct new model
        try {
            while(wares.next())
                tableModel.addRow(buildTableRowData(wares));
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    " mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    /**
     * Returns an array of Objects that can be used as one row for the table.
     * @param ware A ResultSet containing cell values for all column of one
     * row of the database table 'goods'. The cursor must point at the row for
     * which a table representation should be built.
     * @return An array of Objects to be used as data for the corresponding table
     * row.
     * @throws SQLException if some error occurs while accessing the ResultSet.
     */
    private Object[] buildTableRowData(ResultSet ware) throws SQLException {
        Object[] rowData = new Object[10];
        rowData[0]=ware.getInt("id");
        rowData[1]=ware.getString("name");
        rowData[2]=ware.getString("packageName")+" ("+
                ware.getString("packageSize")+ " " +
                ware.getString("packageUnit") +")";
        rowData[3]=ware.getInt("available");
        rowData[4]=computeOrderedAmount(ware.getInt("id"));
        rowData[5]=ware.getDouble("fictivePrice");
        rowData[6]=ware.getDouble("realPrice");
        rowData[7]=ware.getString("seller");
        return rowData;
    }

    /**
     * Determines if a certain row of the table matches its corresponding
     * database table row.
     * @param row The row to be checked.
     * @throws SQLException if an error occurs while reading the database.
     * @return true if all values of the table's row match their corresponding
     * values in the database table; false otherwise.
     */
    private boolean hasTableDataChanged(int row)
        throws SQLException {

        Object[] rowData = Util.getTableRow(tableModel, row);
        ResultSet ware = stmt.executeQuery("SELECT * FROM goods WHERE ID = "
                + rowData[0]);
        ware.next();

        if(
            (Integer)rowData[0] == ware.getInt("id") &&
            ((String)rowData[1]).equals(ware.getString("name")) &&
            ((String)rowData[2]).equals(ware.getString("packageName")+" ("+
                ware.getString("packageSize")+ " " +
                ware.getString("packageUnit") +")") &&
            (Integer)rowData[3] == ware.getInt("available") &&
            (Double)rowData[5] == ware.getDouble("fictivePrice") &&
            (Double)rowData[6] == ware.getDouble("realPrice") &&
            ((String)rowData[7]).equals(ware.getString("seller"))
          )
            return false;
        else
            return true;
    }

    /**
     * Looks up how many pieces of one particular ware are needed at the moment.
     * @param wareID The ware's ID.
     * @return The amount of the ware that is ordered.
     */
    private int computeOrderedAmount(int wareID) throws SQLException{

        int orderedAmount = 0;

        Statement stmt2 = client.getDatabaseConnection().createStatement();
        Statement stmt3 = client.getDatabaseConnection().createStatement();

        ResultSet orders = stmt2.executeQuery("SELECT pieces, orderId FROM " +
                "orderParts WHERE wareId = "+wareID);
        
        while(orders.next()) {
            ResultSet order = stmt3.executeQuery("SELECT processed FROM orders WHERE " +
                    "id = "+orders.getInt("orderId"));
            order.next();
            if(order.getInt("processed") == 0)
                orderedAmount += orders.getInt("pieces");
        }
        return orderedAmount;
    }

    //============================INNER CLASSES===============================//
}
