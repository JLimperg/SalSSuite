/*
 * WareChooserDialog.java
 *
 * Created on 28.06.2010, 22:40:32
 */

package salssuite.clients.magazine;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * Lets the user choose a ware from the list of available wares, and how many
 * times this ware is required. Helper dialog for
 * {@link MagazineClientOrderPanel}s.
 * @author Jannis Limperg
 */
public class WareChooserDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1;

    /**
     * Constructor to add a new ware.
     * @param parent The dialog's parent frame.
     * @param modal Whether the dialog should be modal or not.
     * @param databaseConnection A connection to the ware database at the server.
     * @see salssuite.server.module.MagazineModule#buildDatabase
     */
    public WareChooserDialog(java.awt.Frame parent, boolean modal,
            Connection databaseConnection) {
        super(parent, modal);
        initComponents();

        //connect to the database
        try {
            dbcon = databaseConnection;
            stmt = dbcon.createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Verbindung mit der Datenbank" +
                    " verloren.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            dispose();
            return;
        }

        //set up document listener on ID input field
        wareIDInput.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                updateWareFeedbackDisplay();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateWareFeedbackDisplay();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateWareFeedbackDisplay();
            }

        });

        //usability tweaks
        int xLocation = parent.getX() + parent.getWidth()/2 - getWidth()/2;
        int yLocation = parent.getY() + parent.getHeight()/2 - getHeight()/2;
        setLocation(xLocation, yLocation);
    }

    /**
     * Constructor to change an existing ware.
     * @param parent The dialog's parent frame.
     * @param modal Whether the dialog should be modal or not.
     * @param databaseConnection A connection to the ware database at the server.
     * @param oldPieces The old number of pieces of the old ware.
     * @param oldWareID The ID of the ware to be modified.
     * @see salssuite.server.module.MagazineModule#buildDatabase
     */
    public WareChooserDialog(java.awt.Frame parent, boolean modal, Connection
            databaseConnection, int oldWareID, int oldPieces) {

        this(parent, modal, databaseConnection);

        if(oldWareID < 0)
            return;

        //set values according to given ones
        piecesInput.setText(""+oldPieces);
        wareIDInput.setText(""+oldWareID);
        try {
            ResultSet ware = stmt.executeQuery("SELECT (name) FROM " +
                    "goods WHERE id = "+oldWareID);
            if(!ware.next()) {
                JOptionPane.showMessageDialog(parent, "Unbekannte Ware.",
                        "Datenfehler", JOptionPane.ERROR_MESSAGE);
                return;
            }
            wareFeedbackDisplay.setText(ware.getString("name"));
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Verbindung mit der Datenbank" +
                    " verloren.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            dispose();
            return;
        }
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        piecesInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        OKButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        wareIDInput = new javax.swing.JTextField();
        wareFeedbackDisplay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        piecesInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonPressed(evt);
            }
        });

        jLabel1.setText("x Ware Nr.");

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonPressed(evt);
            }
        });

        cancelButton.setText("Abbrechen");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });

        wareIDInput.setToolTipText("ID der gewünschten Ware eingeben.");
        wareIDInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(piecesInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wareIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(OKButton))
                    .addComponent(wareFeedbackDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(piecesInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(wareIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wareFeedbackDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OKButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OKButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonPressed

        //parse the input
        try {
            chosenWareID = Integer.parseInt(wareIDInput.getText());
            if(chosenWareID <= 0)
                throw new NumberFormatException();

            ResultSet ware = stmt.executeQuery("SELECT id FROM goods WHERE ID"
                    + " = "+chosenWareID);
            if(!ware.next())
                throw new Exception();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Bitte gültige Waren-ID eingeben.",
                    "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            chosenWareID = -1;
            pieces = -1;
            return;
        }

        try {
            pieces = Integer.parseInt(piecesInput.getText());
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Bitte Anzahl zu bestellender" +
                    " Waren eingeben.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            chosenWareID = -1;
            pieces = -1;
            return;
        }

        //check if the number of pieces is positive
        if(pieces <= 0) {
            JOptionPane.showMessageDialog(this, "Die Anzahl der zu bestellenden"
                    + " Waren muss positiv sein.", "Eingabefehler",
                    JOptionPane.ERROR_MESSAGE);
            chosenWareID = -1;
            pieces = -1;
            return;
        }

        //if everything went fine: dispose
        if(chosenWareID > 0 && pieces > 0) {
            dispose();
            return;
        }


        //if not, show an error message
        JOptionPane.showMessageDialog(this, "Schwerer interner Fehler.", "Fehler",
                JOptionPane.ERROR_MESSAGE);
        chosenWareID = -1;
        pieces = -1;
        dispose();
    }//GEN-LAST:event_OKButtonPressed

    private void cancelButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonPressed
        chosenWareID = -1;
        pieces = -1;
        dispose();
    }//GEN-LAST:event_cancelButtonPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField piecesInput;
    private javax.swing.JLabel wareFeedbackDisplay;
    private javax.swing.JTextField wareIDInput;
    // End of variables declaration//GEN-END:variables

    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    Connection dbcon;
    Statement stmt;

    int chosenWareID;
    int pieces;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Returns the ware currently selected by the user.
     * @return The selected ware, or <code>-1</code> if
     * the user has cancelled or there was some kind of error.
     */
    public int getSelectedWareID() {
        return chosenWareID;
    }

    /**
     * Returns the number of pieces the user wants to have of the ware.
     * @return The requested pieces, or <code>-1</code> if the user has cancelled,
     * entered an invalid number or if there was an internal error.
     */
    public int getPieces() {
        return pieces;
    }

    /**
     * Reads the chosen ware ID, looks it up in the database and updates the
     * wareFeedbackDisplay so that it tells the user
     * a) if it exists: the ware's name.
     * b) if it does not exist: that it does not exist.
     */
    private void updateWareFeedbackDisplay() {
        try {
            int wareID = Integer.parseInt(wareIDInput.getText());
            if(wareID <= 0)
                throw new NumberFormatException();

            ResultSet ware = stmt.executeQuery("SELECT name FROM goods WHERE"
                    + " id = " + wareID);
            if(!ware.next()) {
                displayError("nicht gefunden");
                return;
            }

            wareFeedbackDisplay.setForeground(java.awt.Color.BLACK);
            wareFeedbackDisplay.setText(ware.getString("name"));
        }
        catch(NumberFormatException e) {
            displayError("ungültige Eingabe");
        }
        catch(SQLException e) {
            displayError("Netwerkfehler");
        }
    }

    private void displayError(String errorMessage) {
        wareFeedbackDisplay.setText(errorMessage);
        wareFeedbackDisplay.setForeground(java.awt.Color.RED);
    }

    //============================INNER CLASSES===============================//
}
