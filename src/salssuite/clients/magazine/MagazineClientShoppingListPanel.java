/*
 * MagazineClientShoppingListPanel.java
 *
 * Created on 17.08.2010, 22:19:07
 */

package salssuite.clients.magazine;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.Scanner;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import salssuite.util.Util;

/**
 * Creates and manages a shopping list for the project's ware magazine.
 * This panel is part of a {@link MagazineClient}.
 * <p>
 * The shopping list is always generated based on the current orders: If more pieces
 * of a ware are ordered than are available in the magazine, the ware is
 * included in the list.
 * <p>
 * This panel mainly provides import and export methods for shopping lists.
 * A shopping list can be printed to a text file in a human-readable way through
 * the export mechanism. When the magazine is back from shopping, the same list
 * can be re-imported to automatically set the 'available' property of affected
 * wares, hereby updating the database and the shopping list (which should
 * then be empty).
 * <p>
 * Additionally, this panel presents the user with the possibility to generate
 * a balance for all shoppings made by the magazine staff. Again, this balance
 * is created in human-readable text format.
 * @author Jannis Limperg
 * @see salssuite.server.module.MagazineModule
 * @see MagazineClientShoppingListPartPanel
 */
public class MagazineClientShoppingListPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     * @param client The <code>MagazineClient</code> this panel belongs to.
     */
    public MagazineClientShoppingListPanel(MagazineClient client) {
        initComponents();

        scrollPane.getVerticalScrollBar().setUnitIncrement(30);

        this.client = client;

        try {
            stmt = client.getDatabaseConnection().createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Konnte nicht mit der Datenbank" +
                    " verbinden. Beende die Anwendung.", "Kritischer Netzwerkfehler",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(1);
            return;
        }

        updateList();
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        reloadDataButton = new javax.swing.JButton();
        setAllNotRequiredAnyMoreButton = new javax.swing.JButton();
        exportListButton = new javax.swing.JButton();
        listBoughtButton = new javax.swing.JButton();
        generateBalanceButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(730, 430));

        mainPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        mainPanel.setLayout(new java.awt.GridLayout(0, 1));
        scrollPane.setViewportView(mainPanel);

        reloadDataButton.setText("Aktualisieren");
        reloadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadDataButtonPressed(evt);
            }
        });

        setAllNotRequiredAnyMoreButton.setText("Alle eingekauft");
        setAllNotRequiredAnyMoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAllNotRequiredAnyMore(evt);
            }
        });

        exportListButton.setText("Liste exportieren");
        exportListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportList(evt);
            }
        });

        listBoughtButton.setText("Liste abgearbeitet");
        listBoughtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listBought(evt);
            }
        });

        generateBalanceButton.setText("Abrechnung erstellen");
        generateBalanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBalance(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportListButton)
                            .addComponent(setAllNotRequiredAnyMoreButton))
                        .addGap(18, 18, 18)
                        .addComponent(listBoughtButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 251, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(reloadDataButton)
                            .addComponent(generateBalanceButton))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setAllNotRequiredAnyMoreButton)
                    .addComponent(reloadDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportListButton)
                    .addComponent(listBoughtButton)
                    .addComponent(generateBalanceButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reloadDataButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadDataButtonPressed
        updateList();
    }//GEN-LAST:event_reloadDataButtonPressed

    private void setAllNotRequiredAnyMore(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAllNotRequiredAnyMore

        //let the user confirm this action (as it has quite drastic influence
        //on the database and cannot be reverted easily)
        int userSure = JOptionPane.showConfirmDialog(client, "Wirklich alle" +
                    " Waren eingekauft?", "", JOptionPane.WARNING_MESSAGE);

        if(userSure != JOptionPane.YES_OPTION)
            return;

        //remove all panels and their desktop entries
        for(MagazineClientShoppingListPartPanel partPanel : getPartPanels()) {
            if(partPanel == null)
                continue;
            
            partPanel.setNotRequiredAnyMore();
        }
    }//GEN-LAST:event_setAllNotRequiredAnyMore

    /**
     * Generates a text file containing a human-readable shopping list for
     * printing. The user is prompted for the location of the file.
     * @param evt Some action event (no matter what).
     */
    private void exportList(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportList

        //let user choose a destination file
        File destFile;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Textdateien",
                "txt"));
        fileChooser.setDialogTitle("Einkaufsliste speichern");
        int option = fileChooser.showSaveDialog(client);
        if(option != JFileChooser.APPROVE_OPTION)
            return;
        destFile = fileChooser.getSelectedFile();


        //open connection to the file
        PrintWriter out;
        try {
            destFile.getParentFile().mkdirs();
            destFile.createNewFile();
            out = new PrintWriter(new java.io.FileWriter(destFile));
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(client, "Konnte gewählte Datei nicht" +
                    " öffnen.", "Dateifehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //export the data
        //note that it is assumed that a print version of the text file may
        //contain rows of up to 100 characters.

        //a) generate the header
        out.println("SalSSuite: Warenlager");
        out.println("EINKAUFSLISTE");
        out.println("Generiert am "+Util.getDateString()+" um "+Util.
                getTimeString());

        out.println();
        out.println();

        //strings containing some space characters for the header
        String _30spaces = "";
        String _22spaces = "";

        for(int ct = 1; ct <= 30; ct++) {
            _30spaces += " ";
            if(ct <= 22)
                _22spaces += " ";
        }

        out.println("STK | BEZEICHNUNG "+_30spaces+"| ID  | PACKUNG "+
                _22spaces+"| PREIS 1 STK");
        out.println();

        /*column widthes:
         * STK: 3 characters
         * BEZEICHNUNG: 41 characters
         * ID: 3 characters
         * PACKUNG: 29 characters
         * PREIS EINZELN: 12 characters
         */

        //b) construct the ware information
        try {
            ResultSet goods = stmt.executeQuery("SELECT * FROM" +
                    " goods ORDER BY seller, name");

            String lastSeller = null;
            int totalAmount = 0;
            double totalCost = 0;

            int totalAmountPerSeller = 0;
            double totalCostPerSeller = 0;

            while(goods.next()) {
                //get those wares which have to be included, ordered by seller
                int availableAmount = 0;
                int requiredAmount = 0;
                int toBeBoughtAmount;

                availableAmount = goods.getInt("available");

                Statement stmt2 = client.getDatabaseConnection().createStatement();
                Statement stmt3 = client.getDatabaseConnection().createStatement();
                ResultSet orders = stmt2.executeQuery("SELECT pieces, orderId FROM " +
                "orderParts WHERE wareId = "+goods.getInt("id"));

                while(orders.next()) {
                    ResultSet order = stmt3.executeQuery("SELECT processed FROM orders WHERE " +
                            "id = "+orders.getInt("orderId"));
                    order.next();
                    if(order.getInt("processed") == 0)
                        requiredAmount += orders.getInt("pieces");
                }

                if(availableAmount >= requiredAmount)
                    continue;

                toBeBoughtAmount = requiredAmount - availableAmount;

                //build the data
                //aa) if the seller has changed

                String seller = goods.getString("seller");
                if(!seller.equals(lastSeller)) {
                    //if this isn't the first run
                    //print total figures for this seller and reset them
                    if(lastSeller != null) {
                        out.println();
                        out.println("GES ANZAHL: "+totalAmountPerSeller);
                        out.printf("GES PREIS: %1$.2f€", totalCostPerSeller);
                        out.println();
                        out.println();
                        totalAmountPerSeller = 0;
                        totalCostPerSeller = 0;
                    }
                    out.println();

                    //make a new headline
                    out.println("===================="+
                            seller+"====================");
                    out.println();
                    
                    //set new seller
                    lastSeller = seller;
                }

                //bb) construct column data
                String dataString = "";
                dataString += Util.adjustStringLength(""+toBeBoughtAmount, 3) + " | ";
                dataString += Util.adjustStringLength(goods.getString("name"), 41) + " | ";
                dataString += Util.adjustStringLength(goods.getString("id"), 3) + " | ";
                dataString += Util.adjustStringLength(goods.getString("packageName")+
                        " ("+goods.getString("packageSize")+
                        goods.getString("packageUnit")+")", 29) + " | ";
                dataString += goods.getDouble("realPrice");

                out.println(dataString);

                //cc) update total values
                totalAmount += toBeBoughtAmount;
                totalCost += toBeBoughtAmount*goods.getDouble("realPrice");
                totalAmountPerSeller += toBeBoughtAmount;
                totalCostPerSeller += toBeBoughtAmount*goods.getDouble("realPrice");
            }

            //when output is finished, print total values for last seller
            out.println();
            out.println("GES ANZAHL: "+totalAmountPerSeller);
            out.printf("GES PREIS: %1$.2f€", totalCostPerSeller);
            out.println();

            //print total values for all sellers, close and exit
            out.println();
            out.println();
            out.println("DATEN FÜR ALLE HÄNDLER:");
            out.println("    GESAMT ANZAHL: "+totalAmount);
            out.printf("    GESAMT PREIS: %1$.2f€", totalCost);

            out.flush();
            out.close();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation " +
                                "mit der Datenbank", "Netzwerkfehler",
                                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_exportList

    /**
     * Reads a shopping list previously exported using exportShoppingList() and updates
     * the data, assuming that exactly the stuff on the list has been bought.
     *
     * Note that the data is ordered by seller. For each seller, a new headline
     * is created and total cost and piece count for this seller are printed.
     * @param evt Some action event (no matter what).
     */
    private void listBought(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listBought

        //choose the file
        File destFile;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Textdateien",
                "txt"));
        fileChooser.setDialogTitle("Einkaufsliste laden");
        int option = fileChooser.showOpenDialog(client);
        if(option != JFileChooser.APPROVE_OPTION)
            return;
        destFile = fileChooser.getSelectedFile();

        //connect to the file and validate the header
        Scanner in;

        try {
            in = new Scanner(new java.io.FileReader(destFile));
            String header1 = in.nextLine();
            String header2 = in.nextLine();

            if(!header1.equals("SalSSuite: Warenlager") || !header2.equals(
                    "EINKAUFSLISTE")) {
                JOptionPane.showMessageDialog(client, "Die gewählte Datei " +
                        "scheint keine gültige Einkaufsliste zu sein.",
                        "Dateifehler", JOptionPane.ERROR_MESSAGE);
                return;
            }

            for(int ct = 0; ct < 5; ct++)
                in.nextLine();
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(client, "Konnte gewählte Datei nicht" +
                    " öffnen.", "Dateifehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //read all the lines of the file and update the data
        while(in.hasNext()) {

            String line = in.nextLine();

            if(line.length() == 0  || line.startsWith(" ") ||
                    line.startsWith("GES") || line.startsWith("DATEN") ||
                    line.startsWith("="))
                    //means subheading for a seller or total values display
                continue;

            String[] lineParts = line.split("\\|");

            try {
                int pieces = Integer.parseInt(lineParts[0].trim());
                int ID = Integer.parseInt(lineParts[2].trim());
                int available;
                int newAvailable;

                ResultSet ware = stmt.executeQuery("SELECT available, realPrice FROM " +
                        "goods WHERE id = "+ID);
                ware.next();
                available = ware.getInt("available");
                double realPrice = ware.getDouble("realPrice");

                newAvailable = available + pieces;

                stmt.executeUpdate("UPDATE goods SET available = "+newAvailable+
                        " WHERE id = "+ID);

                stmt.executeUpdate("INSERT INTO realPurchases VALUES (" +
                        "'" + Util.getDateString()+"', "+
                        "'" + Util.getTimeString()+"', "+
                        ID+", "+
                        pieces+", "+
                        realPrice+
                        ")");
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(client, "Die gewählte Datei " +
                        "scheint keine gültige Einkaufsliste zu sein.",
                        "Dateifehler", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return;
            }
            catch(ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(client, "Die gewählte Datei " +
                        "scheint keine gültige Einkaufsliste zu sein.",
                        "Dateifehler", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return;
            }
            catch(SQLException e) {
                JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation"+
                        " mit der Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return;
            }

        }//end for every input line

        updateList();
    }//GEN-LAST:event_listBought

    private void generateBalance(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBalance

        //let user choose file
        File destFile;

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Textdateien",
                "txt"));
        fileChooser.setDialogTitle("Einkaufsliste speichern");
        int option = fileChooser.showSaveDialog(client);
        if(option != JFileChooser.APPROVE_OPTION)
            return;
        destFile = fileChooser.getSelectedFile();

        //connect to the file and print the header
        PrintWriter out;
        try {
            out = new PrintWriter(new java.io.FileWriter(destFile));
            out.println("SalSSuite: Warenlager");
            out.println("ABRECHNUNG");
            out.println("Generiert am "+Util.getDateString()+" um "+
                    Util.getTimeString());
            out.println();
            out.println();

            out.printf("%1$5s | %2$3s | %3$67s | %4$3s | %5$5s", "ZEIT", "STK",
                    "BEZEICHNUNG", "ID","PREIS/STK");
            out.println();
            out.println();
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(client, "Konnte gewählte Datei nicht" +
                    " öffnen", "Dateifehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //print the data

        //Note that the data is ordered by purchase date. A 'headline' is
        //created for each date and total cost as well as total piece count
        //is printed out for each date.
        try {

            ResultSet purchases = stmt.executeQuery("SELECT * FROM realPurchases" +
                    " ORDER BY date, time, wareId");

            String lastDate = null;

            String _45equals = ""; //seperator string for date headings
            for(int ct = 0; ct < 45; ct ++) _45equals += "=";

            //the format string to generate the columns:
             String formatString = "%1$5s | %2$3d | %3$67s | %4$3d | %5$5.2f";

            //the total values for one day
            int totalPiecesPerDate = 0;
            double totalCostPerDate = 0;

            //the total values for all days
            int totalPiecesOverall = 0;
            double totalCostOverall = 0;
            
            //for each data row
            while(purchases.next()) {

                String currentDate = purchases.getString("date");

                //if we have reached a new date
                if(!currentDate.equals(lastDate)) {
                    //print total figures for current date and reset them if
                    //this isn't the first run
                    if(!(lastDate == null)) {
                        out.println();
                        out.println("GES ANZAHL: "+totalPiecesPerDate);
                        out.printf("GES KOSTEN: %1$.2f€", totalCostPerDate);
                        out.println();
                        out.println();
                        totalPiecesPerDate = 0;
                        totalCostPerDate = 0;
                    }

                    //print heading for new date
                    out.println(_45equals+currentDate+_45equals);
                    lastDate = currentDate;
                }

                //get name
                Statement stmt2 = client.getDatabaseConnection().createStatement();

                ResultSet wareName = stmt2.executeQuery("SELECT name FROM goods" +
                        " WHERE id = "+purchases.getInt("wareId"));
                wareName.next();
                String name = wareName.getString("name");

                //print all the data
                out.printf(formatString, purchases.getString("time"),
                        purchases.getInt("pieces"),
                        name,
                        purchases.getInt("wareId"),
                        purchases.getDouble("pricePerPiece"));
                out.println();

                //update total values
                totalPiecesPerDate += purchases.getInt("pieces");
                totalCostPerDate += purchases.getInt("pieces")*
                        purchases.getDouble("pricePerPiece");
                totalPiecesOverall += purchases.getInt("pieces");
                totalCostOverall += purchases.getInt("pieces")*
                        purchases.getDouble("pricePerPiece");

            }//end for each purchase

            //Print total values for last day
            out.println();
            out.println("GES ANZAHL: "+totalPiecesPerDate);
            out.printf("GES KOSTEN: %1$.2f€", totalCostPerDate);

            //Print overall total values
            out.println();
            out.println();
            out.println("SUMMEN FÜR ALLE TAGE");
            out.println("    ANZAHL: "+totalPiecesOverall);
            out.printf("    KOSTEN: %1$.2f€", totalCostOverall);

            //flush and close
            out.flush();
            out.close();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation " +
                    "mit der Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_generateBalance


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportListButton;
    private javax.swing.JButton generateBalanceButton;
    private javax.swing.JButton listBoughtButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton reloadDataButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton setAllNotRequiredAnyMoreButton;
    // End of variables declaration//GEN-END:variables


    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    MagazineClient client;
    Statement stmt;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//


    /**
     * Extracts the MagazineClientPartPanels from the children of this panel.
     * @return A list of all the MagazineClientPartPanels this list contains.
     */
    private MagazineClientShoppingListPartPanel[] getPartPanels() {
        LinkedList<MagazineClientShoppingListPartPanel> partPanels = new
                LinkedList<MagazineClientShoppingListPartPanel>();

        for(Component partPanel : mainPanel.getComponents()) {

            MagazineClientShoppingListPartPanel listPartPanel;

            try {
                listPartPanel = (MagazineClientShoppingListPartPanel) partPanel;
                partPanels.add(listPartPanel);
            }
            catch(ClassCastException e) {
                continue;
            }
        }

        return partPanels.toArray(new MagazineClientShoppingListPartPanel[1]);
    }

    /**
     * Updates the visual representation of the current shopping list by querying
     * the database and building new visual representations.
     */
    private void updateList() {

        //clear previous shopping list data
        mainPanel.removeAll();
        mainPanel.setPreferredSize(new java.awt.Dimension(0,0));
        
        try {
            //query the database
            ResultSet goods = stmt.executeQuery("SELECT id, available FROM" +
                    " goods");

            //build the graphical representation
            while(goods.next()) {
                int wareID = goods.getInt("id");
                int availableAmount = goods.getInt("available");
                int requiredAmount = 0;

                Statement stmt2 = client.getDatabaseConnection().createStatement();
                Statement stmt3 = client.getDatabaseConnection().createStatement();
                ResultSet orders = stmt2.executeQuery("SELECT pieces, orderId FROM " +
                "orderParts WHERE wareId = "+wareID);

                while(orders.next()) {
                    ResultSet order = stmt3.executeQuery("SELECT processed FROM" +
                            " orders WHERE id = "+orders.getInt("orderId"));
                    order.next();
                    if(order.getInt("processed") == 0)
                        requiredAmount += orders.getInt("pieces");
                }

                if(availableAmount >= requiredAmount)
                    continue;

                MagazineClientShoppingListPartPanel warePanel = new
                        MagazineClientShoppingListPartPanel(client, client.
                        getDatabaseConnection(), wareID);
                warePanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                mainPanel.add(warePanel);
                mainPanel.setPreferredSize(new java.awt.Dimension((int)mainPanel.
                        getPreferredSize().getWidth(),
                        (int)(mainPanel.getPreferredSize().getHeight()+
                        warePanel.getPreferredSize().getHeight())));
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    " mit der Datenbank.", "Netzwerkfehler",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        validate();
        mainPanel.repaint();
    }

    //============================INNER CLASSES===============================//
}
