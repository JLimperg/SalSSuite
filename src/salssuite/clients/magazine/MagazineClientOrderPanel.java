/*
 * MagazineClientOrderPanel.java
 *
 * Created on 27.06.2010, 14:11:01
 */

package salssuite.clients.magazine;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.GregorianCalendar;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import salssuite.util.Util;

/**
 * A panel representing one order in the {@link MagazineClientOrdersPanel}.
 * All properties of the order can be edited by the user. Cf. the documentation
 * of {@link salssuite.server.module.MagazineModule#buildDatabase} on which properties an
 * order has.
 * <p>
 * The panel for managing magazine orders
 * (<code>MagazineClientOrder<b>s</b>Panel</code>) is built up of one or more
 * <code>MagazineClientOrderPanel</code>s. Generally speaking, this panel
 * allows the user to manage one specific order and the 'parent panel' allows
 * the user to manage the whole list.
 * <p>
 * Note that this panel does all the communication with the database on its
 * own, so parent components should usually not need to care about it. This
 * panel also has a mechanism which removes it from the parent container automatically
 * when the order is deleted by the user.
 * @author Jannis Limperg
 * @see MagazineClient
 * @see salssuite.server.module.MagazineModule
 */
public class MagazineClientOrderPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     * @param client The <code>MagazineClient</code> this panel is part of.
     * @param orderID The order this panel represents.
     * @param companyID The company which has ordered something.
     * @throws IllegalArgumentException if any of the parameters is <code>null</code>.
     */
    public MagazineClientOrderPanel(MagazineClient client, int orderID,
            int companyID) {
        if(orderID < 0)
            throw new IllegalArgumentException("Order to be represented by this" +
                    " panel must not be null.");
        if(companyID < 0)
            throw new IllegalArgumentException("Ordering company must not be null.");
        if(client == null)
            throw new IllegalArgumentException("Underlying client must not be null.");
        initComponents();

        this.client = client;

        try {
            stmt = client.getDatabaseConnection().createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Verbindung mit der Datenbank " +
                    "verloren. Beende die Anwendung...",
                    "Kritischer Fehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(1);
        }

        wareList.setModel(wareListModel);
        setOrder(orderID, companyID);
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        IDDisplay = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        wareList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        isOrderProcessedCheckbox = new javax.swing.JCheckBox();
        isOrderPaidCheckbox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        numberOfWaresDisplay = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        totalValueDisplay = new javax.swing.JLabel();
        companyInput = new javax.swing.JTextField();
        dayInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        monthInput = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        yearInput = new javax.swing.JTextField();
        editWareButton = new javax.swing.JButton();
        addWareButton = new javax.swing.JButton();
        removeWareButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        hourInput = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        minuteInput = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel1.setText("Best. Nr.");

        IDDisplay.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        IDDisplay.setText(" ");

        jScrollPane4.setWheelScrollingEnabled(false);

        jScrollPane4.setViewportView(wareList);

        jLabel2.setText("Firma Nr.:");

        jLabel3.setText("am");

        isOrderProcessedCheckbox.setText("Waren ausgegeben");
        isOrderProcessedCheckbox.setToolTipText("Aktivieren, wenn die Waren bereits ausgegeben wurden.");
        isOrderProcessedCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleProcessed(evt);
            }
        });

        isOrderPaidCheckbox.setText("bezahlt");
        isOrderPaidCheckbox.setToolTipText("Aktivieren, wenn die Waren bereits bezahlt wurden");
        isOrderPaidCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePaid(evt);
            }
        });

        jLabel4.setText("Anzahl:");

        numberOfWaresDisplay.setText("    ");
        numberOfWaresDisplay.setToolTipText("Anzahl der bestellten Waren.");

        jLabel6.setText("Betrag:");

        totalValueDisplay.setText("      ");
        totalValueDisplay.setToolTipText("Zu zahlender Betrag (in Staatswährung).");

        companyInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTimeIDEntered(evt);
            }
        });

        dayInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTimeIDEntered(evt);
            }
        });

        jLabel5.setText(".");

        monthInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTimeIDEntered(evt);
            }
        });

        jLabel7.setText(".");

        yearInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTimeIDEntered(evt);
            }
        });

        editWareButton.setText("Ware ändern");
        editWareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeWare(evt);
            }
        });

        addWareButton.setText("Ware hinzufügen");
        addWareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWare(evt);
            }
        });

        removeWareButton.setText("Ware löschen");
        removeWareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteWare(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel8.setText("Gesamt");

        hourInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTimeIDEntered(evt);
            }
        });

        jLabel9.setText(":");

        minuteInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTimeIDEntered(evt);
            }
        });

        jLabel10.setText("Uhr");

        jLabel11.setText("um");

        jButton1.setText("löschen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeOrder(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(IDDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(companyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(yearInput, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hourInput, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minuteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(isOrderPaidCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(isOrderProcessedCheckbox)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfWaresDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(editWareButton)
                                .addGap(18, 18, 18)
                                .addComponent(addWareButton)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(removeWareButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalValueDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {hourInput, minuteInput});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dayInput, monthInput});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IDDisplay)
                    .addComponent(jLabel3)
                    .addComponent(isOrderProcessedCheckbox)
                    .addComponent(dayInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(yearInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(minuteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(companyInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(isOrderPaidCheckbox))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel4)
                    .addComponent(numberOfWaresDisplay)
                    .addComponent(jLabel6)
                    .addComponent(totalValueDisplay))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editWareButton)
                    .addComponent(addWareButton)
                    .addComponent(removeWareButton)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addWare(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWare

        //determine which ware should be added and how many pieces of it
        WareChooserDialog dia = new WareChooserDialog(client, true,
                client.getDatabaseConnection());
        dia.setVisible(true);
        int chosenWareID = dia.getSelectedWareID();
        int pieces = dia.getPieces();

        if(chosenWareID < 0 || pieces <= 0)
            return;

        //add visual representation
        try {
            ResultSet ware = stmt.executeQuery("SELECT (name) FROM goods WHERE" +
                    " id = "+chosenWareID);
            ware.next();

            String wareEntry = "";
            wareEntry += chosenWareID + " // ";
            wareEntry += ware.getString("name") +" // ";
            wareEntry += pieces;

            wareListModel.addElement(wareEntry);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der" +
                        "Kommunikation mit der Datenbank.", "Fehler beim Speichern",
                        JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }


        //save order and update total numbers
        saveOrder();
        updateTotalNumbers();
    }//GEN-LAST:event_addWare

    private void deleteWare(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteWare

        //find out which ware it is
        int index;
        try {
            index = wareList.getSelectedIndex();
        } catch(ArrayIndexOutOfBoundsException e) {return;}

        String wareDescr = (String)wareListModel.get(index);

        int ID = Integer.parseInt(wareDescr.split("//")[0].trim());

        //delete it from the database
        try {
            stmt.executeUpdate("DELETE FROM orderParts WHERE wareId = "+
                    ID+" AND orderId = "+orderID);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //update GUI
        wareListModel.removeElementAt(index);

        //update total numbers
        updateTotalNumbers();
    }//GEN-LAST:event_deleteWare

    private void changeWare(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeWare

        //find ware to be changed
        int index;
        try {
            index = wareList.getSelectedIndex();
        } catch(ArrayIndexOutOfBoundsException e) {return;}

        if(index < 0)
            return;

        String wareDescr = (String)wareListModel.get(index);

        int oldWareID = Integer.parseInt(wareDescr.split("//")[0].trim());

        int oldPieces = Integer.parseInt(wareDescr.split("//")[2].trim());

        //show WareChooserDialog
        WareChooserDialog dia = new WareChooserDialog(client, true,
                client.getDatabaseConnection(), oldWareID, oldPieces);
        dia.setVisible(true);

        int newPieces = dia.getPieces();
        int newWareID = dia.getSelectedWareID();

        if(newWareID < 0 || newPieces < 0)
            return;

        try {
            //delete old ware
            stmt.executeUpdate("DELETE FROM orderParts WHERE wareId = "+oldWareID+
                    " AND orderId = "+orderID);
            wareListModel.remove(index);

            //add new Ware
            ResultSet ware = stmt.executeQuery("SELECT (name) FROM goods WHERE" +
                    " id = "+newWareID);
            ware.next();

            String wareEntry = "";
            wareEntry += newWareID + " // ";
            wareEntry += ware.getString("name") +" // ";
            wareEntry += newPieces;

            wareListModel.addElement(wareEntry);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //save order and update total numbers
        saveOrder();
        updateTotalNumbers();
    }//GEN-LAST:event_changeWare

    private void removeOrder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeOrder

        //let the user confirm removal
        int userSure = JOptionPane.showConfirmDialog(client, "Bestellung wirklich" +
                " löschen?", "Löschung bestätigen", JOptionPane.YES_NO_OPTION);

        if(userSure != JOptionPane.YES_OPTION)
            return;

        //remove the order from the database
        try {
            stmt.executeUpdate("DELETE FROM orderParts WHERE orderId = "+orderID);
            stmt.executeUpdate("DELETE FROM orders WHERE id = "+orderID);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //remove this panel
        getParent().remove(this);
    }//GEN-LAST:event_removeOrder

    private void toggleProcessed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleProcessed
        //ware parsing
        TreeMap<Integer, Integer> wares = new TreeMap<Integer, Integer>();
            //holds ware IDs as keys and ordered amount as values

        for(int i = 0; i < wareListModel.getSize(); i++) {
            String wareDescr = (String)wareListModel.get(i);

            int pieces = Integer.parseInt(wareDescr.split("//")[2].trim());

            int ID = Integer.parseInt(wareDescr.split("//")[0].trim());

            wares.put(ID, pieces);
        }

        //checkbox state parsing
        boolean processed = isOrderProcessedCheckbox.isSelected();

        String processedString;
        if(processed) processedString = "1"; else processedString = "0";

        try {
            //update order DB entry
            stmt.executeUpdate("UPDATE orders SET "+
                    "processed = " + processedString +
                    " WHERE id = "+orderID
                    );

            //test if more wares are given away than the magazine has.
            //if so, complain.
            for(int wareID : wares.keySet()) {
                ResultSet ware = stmt.executeQuery("SELECT available" +
                            " FROM goods WHERE id = "+wareID);
                ware.next();
                int available = ware.getInt("available");

                if(processed && available < wares.get(wareID)) {
                    //means the order has just been processed, so fewer items
                    //of the ware are available now

                    //test if available amount is less than amount given away;
                    //if so, complain
                        JOptionPane.showMessageDialog(client, "Sie können nicht" +
                                " mehr Waren herausgeben als Sie haben!",
                                "Eingabefehler", JOptionPane.ERROR_MESSAGE);
                        isOrderProcessedCheckbox.setSelected(false);

                        stmt.executeUpdate("UPDATE orders SET processed = 0 WHERE" +
                                " id = "+orderID);
                        return;
                }
            }

            //update the ware database entries
            for(int wareID : wares.keySet()){

                ResultSet ware = stmt.executeQuery("SELECT available" +
                            " FROM goods WHERE id = "+wareID);
                ware.next();
                int available = ware.getInt("available");

                if(processed) {
                    //means the order has just been processed, so fewer items
                    //of the ware are available now
                    stmt.executeUpdate("UPDATE goods SET " +
                            "available = (" +
                            available+" - "+wares.get(wareID)+
                            ") WHERE id = "+wareID);
                }
                else
                    //means the order has just been set 'unprocessed', so more
                    //items of the ware are available now
                    stmt.executeUpdate("UPDATE goods SET " +
                            "available = (" +
                            available+" + "+wares.get(wareID)+
                            ") WHERE id = "+wareID);
            }
        }
        catch(SQLException e) {
            isOrderProcessedCheckbox.setSelected(!isOrderProcessedCheckbox.isSelected());
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_toggleProcessed

    private void togglePaid(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePaid
        //checkbox state parsing
        boolean paid = isOrderPaidCheckbox.isSelected();
        
        String paidString;
        if(paid) paidString = "1"; else paidString = "0";

        //update database entries
        try {
            stmt.executeUpdate("UPDATE orders SET "+
                    "paid = " + paidString +
                    " WHERE id = "+orderID
                    );
        }
        catch(SQLException e) {
            isOrderProcessedCheckbox.setSelected(!isOrderProcessedCheckbox.isSelected());
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_togglePaid

    private void dateTimeIDEntered(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTimeIDEntered
        saveOrder();
    }//GEN-LAST:event_dateTimeIDEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IDDisplay;
    private javax.swing.JButton addWareButton;
    private javax.swing.JTextField companyInput;
    private javax.swing.JTextField dayInput;
    private javax.swing.JButton editWareButton;
    private javax.swing.JTextField hourInput;
    private javax.swing.JCheckBox isOrderPaidCheckbox;
    private javax.swing.JCheckBox isOrderProcessedCheckbox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField minuteInput;
    private javax.swing.JTextField monthInput;
    private javax.swing.JLabel numberOfWaresDisplay;
    private javax.swing.JButton removeWareButton;
    private javax.swing.JLabel totalValueDisplay;
    private javax.swing.JList wareList;
    private javax.swing.JTextField yearInput;
    // End of variables declaration//GEN-END:variables


    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    int orderID;
    int companyID;

    Statement stmt;

    MagazineClient client;
    DefaultListModel wareListModel = new DefaultListModel();

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Saves this ware's ID, date, time, and wares. Does NOT save the 'processed'
     * and 'paid' state.
     */
    private void saveOrder() {
        
        //parse ID and date
        int newCompanyID;
        GregorianCalendar date;

        try {
            newCompanyID = Integer.parseInt(companyInput.getText());

            date = new GregorianCalendar();
            date.set(GregorianCalendar.DAY_OF_MONTH, Integer.parseInt(dayInput.getText()));
            date.set(GregorianCalendar.MONTH, Integer.parseInt(monthInput.getText())-1);
            date.set(GregorianCalendar.YEAR,
                    Util.expandYear(Integer.parseInt(yearInput.getText())));
            date.set(GregorianCalendar.HOUR_OF_DAY, Integer.parseInt(hourInput.getText()));
            date.set(GregorianCalendar.MINUTE, Integer.parseInt(minuteInput.getText()));

        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(client, "Fehler beim Parsen des" +
                    "Bestelldatums oder der Firmen-ID.", "Eingabefehler",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        //parse wares
        TreeMap<Integer, Integer> wares = new TreeMap<Integer, Integer>();

        for(int i = 0; i < wareListModel.getSize(); i++) {
            String wareDescr = (String)wareListModel.get(i);

            int pieces = Integer.parseInt(wareDescr.split("//")[2].trim());

            int ID = Integer.parseInt(wareDescr.split("//")[0].trim());

            wares.put(ID, pieces);
        }

        //update the database entry
        try {
            stmt.executeUpdate("UPDATE orders SET " +
                    "companyId = "+newCompanyID + ", " +
                    "date = " + "'"+Util.getDateString(date) + "', " +
                    "time = " + "'"+Util.getTimeString(date) + "' " +
                    " WHERE id = "+orderID
                    );

            stmt.executeUpdate("DELETE FROM orderParts WHERE orderId = "
                    +orderID);

            for(Integer wareID : wares.keySet()) {
                stmt.executeUpdate("INSERT INTO orderParts (orderId, wareId, pieces)" +
                        "VALUES (" +
                        orderID + ","+
                        wareID + ","+
                        wares.get(wareID) + ")"
                        );
            }
        } catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der" +
                    "Kommunikation mit der Datenbank.", "Fehler beim Speichern",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //update the total numbers displays
        updateTotalNumbers();
    }

    /**
     * Sets the order represented by this component. The visual representation
     * is done accordingly.
     * @param orderID The order to be represented.
     * @param companyID The company which has ordered something.
     */
    public void setOrder(int orderID, int companyID) {

        this.orderID = orderID;

        try {

            //fetch data from the database
            ResultSet order = stmt.executeQuery("SELECT * FROM orders WHERE " +
                    "id = "+orderID);
            order.next();

            //do visual representation
            IDDisplay.setText(""+orderID);
            companyInput.setText(""+order.getInt("companyId"));
            String[] date = Util.parseDateString(order.getString("date"));
            String[] time = Util.parseTimeString(order.getString("time"));
            
            if(!(date == null) && !(time == null)) {
                dayInput.setText(date[2]);
                monthInput.setText(date[1]);
                yearInput.setText(date[0]);
                hourInput.setText(time[0]);
                minuteInput.setText(time[1]);
            }


            if(order.getInt("processed") == 1)
                isOrderProcessedCheckbox.setSelected(true);
            else
                isOrderProcessedCheckbox.setSelected(false);

            if(order.getInt("paid") == 1)
                isOrderPaidCheckbox.setSelected(true);
            else
                isOrderPaidCheckbox.setSelected(false);

            //process the wares belonging to this order
            ResultSet orderedWares = stmt.executeQuery("SELECT wareId, pieces FROM" +
                    " orderParts WHERE orderId = "+orderID+" ORDER BY (wareId)");

            while(orderedWares.next()) {

                Statement stmt2 = client.getDatabaseConnection().createStatement();
                ResultSet ware = stmt2.executeQuery("SELECT name FROM goods " +
                        "WHERE id = "+orderedWares.getInt("wareId"));
                ware.next();

                //new entry for ware display
                String wareEntry = "";
                wareEntry += orderedWares.getInt("wareId") + " // ";
                wareEntry += ware.getString("name") +" // ";
                wareEntry += orderedWares.getInt("pieces");


                wareListModel.addElement(wareEntry);
            }

        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //update total numbers
        updateTotalNumbers();
    }

    /**
     * Updates the labels displaying total amount of orderedWares and total cost to
     * reflect the currently set orderedWares.
     */
    private void updateTotalNumbers() {

        int totalAmount = 0;
        int totalCost = 0;

        //for each ware in the GUI's ware list:
        for(int i = 0; i < wareListModel.getSize(); i++) {
            String wareDescr = (String)wareListModel.get(i);

            //get pieces and ID; add pieces to total pieces
            int pieces = Integer.parseInt(wareDescr.split("//")[2].trim());
            totalAmount += pieces;

            int ID = Integer.parseInt(wareDescr.split("//")[0].trim());

            //fetch the price and add it to the total price
            try {
                ResultSet ware = stmt.executeQuery("SELECT fictivePrice FROM" +
                        " goods WHERE id = "+ID);
                ware.next();
                totalCost += ware.getDouble("fictivePrice")*pieces;
            }
            catch(SQLException e) {
                JOptionPane.showMessageDialog(client, "Fehler bei der Kommunikation" +
                    "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return;
            }
        }

        numberOfWaresDisplay.setText(""+totalAmount);
        totalValueDisplay.setText(""+totalCost);
    }

    /**
     * Returns the order represented by this component.
     * @return The represented order.
     */
    public int getOrderID() {
        return orderID;
    }

    /**
     * Returns the ID of the company which has ordered the wares.
     * @return The ordering company.
     */
    public int getCompanyID() {
        return companyID;
    }

    //============================INNER CLASSES===============================//
}
