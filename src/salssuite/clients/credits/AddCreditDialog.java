/*
 * AddCreditDialog.java
 *
 * Created on 02.06.2011, 17:43:27
 */

package salssuite.clients.credits;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import salssuite.util.Util;

/**
 * Dialog that can be used to let the user create a new credit. Performs all
 * database operations on its own, therefore no interaction with other UI
 * components is necessary.
 * @author Jannis Limperg
 */
public class AddCreditDialog extends javax.swing.JDialog {

    //Serialization not supported!
    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     * @param parent This dialog's parent frame.
     * @param modal Whether this dialog should be modal or not.
     * @param dbcon A connection to the database holding the 'credits', 'citizens'
     * and 'companies' tables.
     */
    public AddCreditDialog(java.awt.Frame parent, boolean modal, Connection
            dbcon) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.dbcon = dbcon;

        //prepare database access
        try {
            stmt = dbcon.createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //add default values to the GUI
        GregorianCalendar now = new GregorianCalendar();
        currentYearDisplay1.setText(""+now.get(GregorianCalendar.YEAR));
        currentYearDisplay2.setText(""+now.get(GregorianCalendar.YEAR));
        startDayInput.setText(now.get(GregorianCalendar.DAY_OF_MONTH)+"."+
                (now.get(GregorianCalendar.MONTH)+1)+".");
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "deprecation"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        citizenIDInput = new javax.swing.JTextField();
        companyIDInput = new javax.swing.JTextField();
        citizenDisplay = new javax.swing.JLabel();
        companyDisplay = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        amountInput = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        interestInput = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        startDayInput = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        endDayInput = new javax.swing.JTextField();
        currentYearDisplay1 = new javax.swing.JLabel();
        currentYearDisplay2 = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kredit hinzufügen");

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
        jLabel1.setText("Kredit hinzufügen");

        jLabel2.setText("<html>Kreditnehmer (<b>entweder</b> Bürger- <b>oder</b> Firmen-Nr. eingeben!)</html>");

        jLabel3.setText("Bürger Nr.");

        jLabel4.setText("Firma Nr.");

        citizenIDInput.setToolTipText("ID des Bürgers, der den Kredit erhält.");
        citizenIDInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                updateCitizenDisplay(evt);
            }
        });

        companyIDInput.setToolTipText("ID der Firma, die den Kredit erhält.");
        companyIDInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                updateCompanyDisplay(evt);
            }
        });

        jLabel5.setText("Betrag");

        amountInput.setToolTipText("geliehener Betrag");

        jLabel6.setText("Zinsen pro Tag");

        interestInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        interestInput.setText("0");
        interestInput.setToolTipText("Zinsrate pro Tag");

        jLabel7.setText("%");

        jLabel8.setText("ausgegeben am");

        startDayInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        startDayInput.setToolTipText("Tag, an dem dieser Kredit ausgegeben wurde. Format TT.MM");
        startDayInput.setNextFocusableComponent(confirmButton);

        jLabel9.setText("fällig am");

        endDayInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        endDayInput.setToolTipText("Tag, an dem dieser Kredit zurückgezahlt werden muss. Format TT.MM");

        currentYearDisplay1.setText("2011");

        currentYearDisplay2.setText("2011");

        confirmButton.setText("Absenden");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirm(evt);
            }
        });

        cancelButton.setText("Abbrechen");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(amountInput, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(companyIDInput)
                                            .addComponent(citizenIDInput, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(interestInput, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel7))
                                    .addComponent(companyDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                    .addComponent(citizenDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startDayInput))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(65, 65, 65)
                                        .addComponent(endDayInput, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(currentYearDisplay2)
                                    .addComponent(currentYearDisplay1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 282, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 318, Short.MAX_VALUE)
                        .addComponent(confirmButton)
                        .addGap(22, 22, 22))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {citizenIDInput, companyIDInput});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {amountInput, interestInput});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {endDayInput, startDayInput});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(citizenIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(citizenDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(companyIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(companyDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(amountInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(interestInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(endDayInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentYearDisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(startDayInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentYearDisplay2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {citizenIDInput, companyIDInput});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {endDayInput, startDayInput});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
        dispose();
    }//GEN-LAST:event_cancel

    private void confirm(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirm
        //parse IDs
        int citizenID = -1, companyID = -1;
        
        if(!(citizenIDInput.getText().trim().length() == 0 ||     //means there is text
                companyIDInput.getText().trim().length() == 0)) { //in both fields
            JOptionPane.showMessageDialog(this, "<html>Bitte <b>entweder</b> Bürger-"
                    + " <b>oder</b> Firmen-Nr. eingeben.</html>", "Eingabefehler",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            if(citizenIDInput.getText().trim().length() != 0)
                citizenID = Integer.parseInt(citizenIDInput.getText().trim());
            else
                companyID = Integer.parseInt(companyIDInput.getText().trim());
            if(citizenID < 0 && companyID < 0)
                throw new NumberFormatException();
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Bitte positive ganze Zahl"
                    + " in eines der Felder für die Bürger- bzw. Firmen-Nr."
                    + " eingeben.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //check if IDs exist
        try {
            if(citizenID != -1) {
                ResultSet citizen = stmt.executeQuery("SELECT id FROM citizens"
                        + " WHERE id = " + citizenID);
                if(!citizen.next()) {
                    JOptionPane.showMessageDialog(this, "Kein Bürger mit dieser"
                            + " Nummer vorhanden.", "Datenfehler",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            else {
                ResultSet company = stmt.executeQuery("SELECT id FROM companies"
                        + " WHERE id = " + companyID);
                if(!company.next()) {
                    JOptionPane.showMessageDialog(this, "Keine Firma mit dieser"
                            + " Nummer vorhanden.", "Datenfehler",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //parse amount and interest
        double amount, interest;
        try {
            amount = Double.parseDouble(amountInput.getText().replaceAll(",", "."));
            interest = Double.parseDouble(interestInput.getText().replaceAll(",", "."));
            if(amount < 0 || interest < 0)
                throw new NumberFormatException();
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "<html>Bitte positive Fließkomma"
                    + "zahlen ('4'; '4,4'; '090,789' etc.)<br/> in die Felder für"
                    + " Betrag und Zinsen eingeben.</html>", "Eingabefehler",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        //parse dates
        String[] endDayText = endDayInput.getText().trim().split("\\.");
        String[] startDayText = startDayInput.getText().trim().split("\\.");

        if(endDayText.length < 2 || startDayText.length < 2) {
            JOptionPane.showMessageDialog(this, "In die Felder für die Daten bitte"
                    + " Tag und Monat im Format TT.MM. eingeben.",
                    "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        GregorianCalendar startDay, endDay;
        try {
            int endDayDay, endDayMonth, startDayDay, startDayMonth;
            endDayDay = Integer.parseInt(endDayText[0]);
            endDayMonth = Integer.parseInt(endDayText[1]);
            startDayDay = Integer.parseInt(startDayText[0]);
            startDayMonth = Integer.parseInt(startDayText[1]);

            if(endDayDay < 1 || endDayDay > 31 || startDayDay < 1 || startDayDay
                    > 31 || endDayMonth < 1 || endDayMonth > 12 || startDayMonth
                    < 1 || startDayMonth > 12)
                throw new NumberFormatException();

            int year = new GregorianCalendar().get(GregorianCalendar.YEAR);
            endDay = new GregorianCalendar(year, endDayMonth-1,
                    endDayDay);
            startDay = new GregorianCalendar(year,
                    startDayMonth-1, startDayDay);

            if(endDay.before(startDay)) {
                JOptionPane.showMessageDialog(this, "<html>Der Tag, an dem der"
                        + " Kredit fällig ist,<br/> muss vor dem Ausgabetag"
                        + " liegen.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ungültiges Datumsformat.",
                    "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //insert everything into the database
        try {
            stmt.executeUpdate("INSERT INTO credits VALUES("
                    + "DEFAULT,"
                    + companyID + ","
                    + citizenID + ","
                    + amount + ","
                    + interest + ","
                    + "'" + Util.getDateString(startDay) + "',"
                    + "'" + Util.getDateString(endDay) + "',"
                    + "0)");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //we're done, dispose
        dispose();
    }//GEN-LAST:event_confirm

    private void updateCitizenDisplay(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateCitizenDisplay
        //get ID
        int ID;
        try {
            ID = Integer.parseInt(citizenIDInput.getText());
        }
        catch(NumberFormatException e) {
            citizenDisplay.setForeground(Color.RED);
            citizenDisplay.setText("(Ungültige Eingabe)");
            return;
        }

        //get citizen if possible
        try {
            ResultSet citi = stmt.executeQuery("SELECT forename, surname FROM"
                    + " citizens WHERE id = "+ID);
            if(citi.next()) {
                citizenDisplay.setForeground(Color.BLACK);
                citizenDisplay.setText(citi.getString("forename").split(" ")[0] +
                        " " + citi.getString("surname"));
            }
            else {
                citizenDisplay.setForeground(Color.RED);
                citizenDisplay.setText("(Bürger unbekannt)");
            }
        }
        catch(SQLException e) {
            citizenDisplay.setForeground(Color.RED);
            citizenDisplay.setText("(Netzwerkfehler)");
        }
    }//GEN-LAST:event_updateCitizenDisplay

    private void updateCompanyDisplay(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_updateCompanyDisplay
        //get ID
        int ID;
        try {
            ID = Integer.parseInt(companyIDInput.getText());
        }
        catch(NumberFormatException e) {
            companyDisplay.setForeground(Color.RED);
            companyDisplay.setText("(Ungültige Eingabe)");
            return;
        }

        //get citizen if possible
        try {
            ResultSet company = stmt.executeQuery("SELECT name FROM"
                    + " citizens WHERE id = "+ID);
            if(company.next()) {
                companyDisplay.setForeground(Color.BLACK);
                companyDisplay.setText(company.getString("name"));
            }
            else {
                companyDisplay.setForeground(Color.RED);
                companyDisplay.setText("(Betrieb unbekannt)");
            }
        }
        catch(SQLException e) {
            companyDisplay.setForeground(Color.RED);
            companyDisplay.setText("(Netzwerkfehler)");
        }
    }//GEN-LAST:event_updateCompanyDisplay

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountInput;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel citizenDisplay;
    private javax.swing.JTextField citizenIDInput;
    private javax.swing.JLabel companyDisplay;
    private javax.swing.JTextField companyIDInput;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel currentYearDisplay1;
    private javax.swing.JLabel currentYearDisplay2;
    private javax.swing.JTextField endDayInput;
    private javax.swing.JTextField interestInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField startDayInput;
    // End of variables declaration//GEN-END:variables

    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    Connection dbcon;
    Statement stmt;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    //============================INNER CLASSES===============================//
}
