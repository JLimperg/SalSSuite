/*
 * ConnectDialog.java
 *
 * Created on 01.02.2010, 17:27:09
 *
 */

/*
 *  SalSSuite - Suite of programmes for managing a SalS project
 *  Copyright (C) 2011  Jannis Limperg <jannis[dot]limperg[at]arcor[dot]de>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package salssuite.clients;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.PrintWriter;
import java.net.Authenticator;
import java.net.PasswordAuthentication;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import salssuite.util.Constants;
import salssuite.util.gui.ExceptionDisplayDialog;
import salssuite.util.Passwords;
import salssuite.util.Util;

/**
 * Asks the user for IP-Address and port of the server as well as username
 * and password. This dialog can be used by clients to try and get a connection
 * to the server the user specifies. Furthermore, this client does the
 * authentication dance with the server (see {@link salssuite.server.Server}).
 * <p>
 * Moreover, the user can specify a SOCKS proxy to use for all the network traffic.
 * This is definitely useful if you build your SalS network upon the usual
 * school network that is most probably protected by some sort of proxy.
 * <p>
 * Note that the SalSSuite does not use html for network communication, so an
 * html proxy will not do the trick.
 * <p>
 * Note that the programme is terminated if the dialog is closed as it would not
 * make sense to run a client without having a connection. If you want to change
 * this behaviour, perform the following steps:<br/>
 * <br/><code>
 * ConnectDialog dia = new ConnectDialog();<br/>
 * dia.removeWindowListener(dia);</code><br/>
 * <br/>
 * Then you can add any other {@link java.awt.event.WindowListener}s you like.
 * @author Jannis Limperg
 * @version 1.0
 */
public class ConnectDialog extends javax.swing.JDialog {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor.
     * @param parent The dialog's parent frame.
     * @param modal Whether the dialog should be modal or not.
     * @param moduleName The name of the module this dialog should connect to.
     * Must correspond to the key 'module' in the database's 'permissions'
     * table.
     * @see salssuite.server.Server#buildServerDatabase
     */
    public ConnectDialog(java.awt.Frame parent, boolean modal, String moduleName) {
        super(parent, modal);
        this.parent = parent;
        serverAddress = node.get("serverAddress", "");
        userName = node.get("username", "");
        port = node.getInt("port", Constants.GENERAL_DATABASE_PORT);
        proxyHost = node.get("proxyHost", "");
        proxyPort = node.getInt("proxyPort", -1);
        proxyUsername = node.get("proxyUsername", "");
        proxyPassword = node.get("proxyPassword", "").toCharArray();

        initComponents();

        addressInput.setText(serverAddress);
        userNameInput.setText(userName);
        portInput.setText(""+port);
        proxyHostInput.setText(proxyHost);
        proxyPortInput.setText(""+proxyPort);
        proxyUsernameInput.setText(proxyUsername);
        proxyPasswordInput.setText(new String(proxyPassword));

        if(serverAddress.length() == 0 && userName.length() == 0)
            addressInput.requestFocus();
        else if(userName.length() == 0)
            userNameInput.requestFocus();
        else
            passwordInput.requestFocus();
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt) {
                Constants.serverSetupDialogNode.putInt("window.x", getX());
                Constants.serverSetupDialogNode.putInt("window.y", getY());
                System.exit(0);
            }
        });

        if(parent != null)
            setLocationRelativeTo(parent);

        else {
            setLocation(Constants.preProjectDialogNode.getInt("window.x", 200),
                    Constants.preProjectDialogNode.getInt("window.y", 200));
        }
        
        this.moduleName = moduleName;
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        addressInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        userNameInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        passwordInput = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        portInput = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        proxyHostInput = new javax.swing.JTextField();
        proxyPortInput = new javax.swing.JTextField();
        proxyUsernameInput = new javax.swing.JTextField();
        proxyPasswordInput = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mit Server verbinden");

        jLabel1.setText("Server-Adresse");

        addressInput.setToolTipText("IP-Adresse des Servers eingeben");
        addressInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect(evt);
            }
        });
        addressInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAll(evt);
            }
        });

        jLabel2.setText("Benutzername");

        jButton1.setText("Verbinden");
        jButton1.setToolTipText("Verbindet zum oben eingegebenen Server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect(evt);
            }
        });

        userNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect(evt);
            }
        });
        userNameInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAll(evt);
            }
        });

        jLabel3.setText("Passwort");

        passwordInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect(evt);
            }
        });
        passwordInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAll(evt);
            }
        });

        jLabel4.setText("Port");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(33, 33, 33))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(83, 83, 83))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(102, 102, 102)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordInput, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(162, 162, 162))
                    .addComponent(portInput, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameInput, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(addressInput, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(portInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Verbindung", jPanel1);

        jLabel5.setText("Proxy-Host");

        jLabel6.setText("Proxy-Port");

        jLabel7.setText("Benutzername");

        jLabel8.setText("Passwort");

        proxyHostInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAll(evt);
            }
        });

        proxyPortInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAll(evt);
            }
        });

        proxyUsernameInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAll(evt);
            }
        });

        proxyPasswordInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                selectAll(evt);
            }
        });

        jLabel9.setText("Wenn kein Proxy genutzt werden soll bitte alle Felder frei lassen.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(proxyPasswordInput)
                            .addComponent(proxyUsernameInput)
                            .addComponent(proxyHostInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                            .addComponent(proxyPortInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel9))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(proxyHostInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(proxyPortInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proxyUsernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proxyPasswordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Proxy", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect
        //set proxy server
        proxyHost = proxyHostInput.getText();
        if(!(proxyHost == null) && !(proxyHost.length() == 0)) {
            proxyUsername = proxyUsernameInput.getText();
            proxyPassword = proxyPasswordInput.getPassword();

            try {
                proxyPort = Integer.parseInt(proxyPortInput.getText());
                if(proxyPort < 0)
                    throw new NumberFormatException();
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(parent, "Keine gültige Zahl im"
                        + " Eingabefeld für den Proxy-Port.",
                        "Eingabefehler", JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.setProperty("socksProxyHost", proxyHost);
            System.setProperty("socksProxyPort", ""+proxyPort);

            //prepare authentication at proxy servers
            Authenticator.setDefault(new Authenticator() {
                @Override
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(proxyUsername,
                            proxyPassword);
                }
            });
        }//end if proxy set
        else {
            proxyHost = proxyUsername = "";
            proxyPassword = new char[0];
            proxyPort = -1;
            System.setProperty("socksProxyHost", "");
            System.setProperty("socksProxyPort", "");
        }

        //parse the rest of the input
        serverAddress = addressInput.getText();
        userName = userNameInput.getText();

        //check if user attempts to use forbidden characters
        if(!Util.checkInput(serverAddress) || !Util.checkInput(userName))
            return;

        try {
            password = Passwords.encryptPassword(new String(passwordInput.getPassword()));
            port = Integer.parseInt(portInput.getText());
            if(port < 0)
                throw new NumberFormatException();
        }
        catch(NoSuchAlgorithmException e) {
            new ExceptionDisplayDialog(parent, true, e, "SYSTEMFEHLER", 30).
                    setVisible(true);
            e.printStackTrace();
            return;
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(parent, "Keine gültige Zahl im Port-Feld.",
                    "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //try to authenticate
        try {
            String[] authData = authenticateAtServer(new Socket(serverAddress,
                    port),
                    userName, password, moduleName, parent);
            if(authData == null)
                return;
            databaseUsername = authData[0];
            databasePassword = authData[1];
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(parent, "Konnte nicht mit dem Server"
                    + " verbinden.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //make the nodes
        node.put("serverAddress", serverAddress);
        node.putInt("port", port);
        node.put("username", userName);
        node.put("proxyHost", proxyHost);
        node.putInt("proxyPort", proxyPort);
        node.put("proxyUsername", proxyUsername);

        //dispose the window
        dispose();
    }//GEN-LAST:event_connect

    private void selectAll(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_selectAll
        ((javax.swing.JTextField)evt.getSource()).selectAll();
    }//GEN-LAST:event_selectAll

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressInput;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JTextField portInput;
    private javax.swing.JTextField proxyHostInput;
    private javax.swing.JPasswordField proxyPasswordInput;
    private javax.swing.JTextField proxyPortInput;
    private javax.swing.JTextField proxyUsernameInput;
    private javax.swing.JTextField userNameInput;
    // End of variables declaration//GEN-END:variables


    //===========================OWN CODE=====================================//

    Preferences node = Constants.serverSetupDialogNode;

    //FIELDS
    String serverAddress = null;
    String userName = null;
    String password = null;
    String moduleName;
    int port = -1;

    String proxyHost = null;
    int proxyPort = -1;
    String proxyUsername = null;
    char[] proxyPassword = null;

    String databaseUsername;
    String databasePassword;

    java.awt.Frame parent;



    //METHODS
    /**
     * Authenticates this client at the server. This method connects
     * to the server represented by <code>connection</code> and requests the
     * data needed to connect to the database. These are a) some
     * databaseUsername and b) a randomly chosen databasePassword. For
     * more details on how the authentication mechanism works, please refer to
     * the {@link salssuite.server.Server}'s documentation.
     * @param connection A connection to the server.
     * @param username The username the user has entered.
     * @param passwordHash An MD5 hash of the password the user has entered.
     * @param moduleName The name of the module you want to connect to.
     * @param parent A frame which should be used as a parent for message dialogs
     * generated by this methods.
     * @return An array of <code>String</code>s, containing at position 0 the
     * databaseUsername and at position 1 the databasePassword.
     * <p>
     * If an error occurred, <code>null</code> is returned.
     */
    private static String[] authenticateAtServer(Socket connection, String username,
            String passwordHash, String moduleName, java.awt.Frame parent) {

        Scanner in;
        PrintWriter out;

        //connect to the server
        try {
            //connecting to server

            in = new Scanner(connection.getInputStream());
            out = new PrintWriter(connection.getOutputStream());
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(parent, "Konnte nicht mit dem Server"
                    + " verbinden.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            return null;
        }
     
        try {
            //request
            out.println("AUTHORIZATION");
            out.println("USERNAME "+username);
            out.println("HASH "+passwordHash);
            out.println("MODULE "+moduleName);
            out.flush();

            String response = in.nextLine();

            //check for common errors
            if(response.equals("FAIL UNKNOWN USERNAME")) {
                JOptionPane.showMessageDialog(parent, "Unbekannter Benutzername.",
                        "Fehler", JOptionPane.ERROR_MESSAGE);
                return null;
            }

            if(response.equals("FAIL WRONG PASSWORD")) {
                JOptionPane.showMessageDialog(parent, "Falsches Passwort.",
                        "Fehler", JOptionPane.ERROR_MESSAGE);
                return null;
            }

            if(response.equals("FAIL PERMISSION DENIED")) {
                JOptionPane.showMessageDialog(parent, "<html>Sie haben nicht die nötigen "
                        + "Berechtigungen<p> zum Zugriff auf dieses Modul.</html>",
                        "Fehler", JOptionPane.ERROR_MESSAGE);
                return null;
            }

            //check for unexpected error
            if(!response.equals("SUCCESS")) {
                JOptionPane.showMessageDialog(parent, "<html>Unbekannter Fehler.",
                        "Fehler", JOptionPane.ERROR_MESSAGE);
                return null;
            }

            //generate authentication data
            String[] authData = new String[2];
            authData[0] = in.nextLine().replace("DATABASE_USERNAME ", "");
            authData[1] = in.nextLine().replace("DATABASE_PASSWORD ", "");
            return authData;
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(parent, "<html>Unerwarteter Fehler bei der"
                    + "Kommunikation mit dem Server:<p>"+e.getMessage()+"</html>",
                    "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    /**
     * Shows a <code>ConnectDialog</code>. The server address, port,
     * username and password entered by the user are returned. It is ensured that
     * <code>port</code> is a regular <code>int</code> so you can just convert to
     * <code>int</code> without catching a <code>NumberFormatException</code>.
     * @param parent The <code>Frame</code> this dialog is modal to.
     * @param moduleName The name of the module this dialog should connect to.
     * Must correspond to the key 'module' in the database's 'permissions'
     * table.
     * @return An array of <code>String</code>s, where index 0 represents the
     * server address, index 1 the port number, index 2 the username, and index
     * 3 the password.
     */
    public static String[] showConnectDialog(java.awt.Frame parent,
            String moduleName) {
        ConnectDialog dia = new ConnectDialog(parent, true, moduleName);
        dia.setVisible(true);
        return new String[] {dia.getServerAddress(), ""+dia.getPort(),
        dia.getUserName(), dia.getPassword()};
    }

    /**
     * Returns the port on which the database server should listen. <code>-1</code> if
     * not valid.
     * @return The port, as a positive <code>int</code>.
     */
    public int getPort() {
        return port+1;
    }

    /**
     * Returns the server address entered by the user. <code>null</code> if not valid.
     * @return The server address. Note that it is not checked whether this is
     * a valid IP-address or not.
     */
    public String getServerAddress() {
        return serverAddress;
    }

    /**
     * Returns the username that can be used to connect to the Derby server.
     * @return The username.
     * @see salssuite.server.Server
     */
    public String getUserName() {
        return databaseUsername;
    }

    /**
     * Returns the password that can be used to connect to the Derby server.
     * @return The password.
     * @see salssuite.server.Server
     */
    public String getPassword() {
        return databasePassword;
    }
}
