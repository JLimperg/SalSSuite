/*
 * CategoryManagingDialog.java
 *
 * Created on 12.12.2010, 22:19:41
 */

package salssuite.clients.accounting;

import java.awt.Frame;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import salssuite.util.Util;

/**
 * Dialog used to manage the categories for the accounting system. The user
 * can add, delete and edit categories. The dialog handles all
 * communication with the database itself, so other components can just
 * display it and wait for its disposal.
 * <p>
 * For data consistency reasons, removing a category does not remove all
 * references to it. Instead, all entries remain exactly the same but no
 * entries with this category can further be created using the client GUI.
 * @author Jannis Limperg
 * @see salssuite.clients.accounting.AccountingClient
 * @see salssuite.server.module.AccountingModule
 */
public class CategoryManagingDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     * @param parent This dialog's parent frame.
     * @param modal Whether this dialog should be modal or not.
     * @param databaseConnection A connection to the database which the
     * 'accounting_categories' table is part of.
     * @see salssuite.server.module.AccountingModule#buildDatabase
     */
    public CategoryManagingDialog(java.awt.Frame parent, boolean modal,
            Connection databaseConnection) {
        super(parent, modal);
        initComponents();

        //database connection
        dbcon = databaseConnection;
        this.parent = parent;

        try {
            stmt = dbcon.createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Konnte nicht mit der Datenbank"
                    + " verbinden.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            dispose();
            return;
        }

        updateListModel();

        //usability
        int x = (int)(parent.getLocation().getX() + parent.getWidth()*0.5
                - getPreferredSize().getWidth()*0.5);
        int y = (int)(parent.getLocation().getY() + parent.getHeight()*0.5
                - getPreferredSize().getHeight()*0.5);
        setLocation(x, y);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        addCategoryButton = new javax.swing.JButton();
        deleteCategoryButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Kategorien");

        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editCategory(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        addCategoryButton.setText("Kategorie hinzufügen");
        addCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategory(evt);
            }
        });

        deleteCategoryButton.setText("Kategorie löschen");
        deleteCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCategory(evt);
            }
        });

        jLabel2.setText("Zum Bearbeiten einer Kategorie auf ihren Listeneintrag doppelklicken");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addCategoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 191, Short.MAX_VALUE)
                        .addComponent(deleteCategoryButton))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteCategoryButton)
                    .addComponent(addCategoryButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addCategory(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategory
        //ask user for category name
        String name = JOptionPane.showInputDialog(parent,
                "Name der neuen Kategorie:", "", JOptionPane.QUESTION_MESSAGE);
        if(name == null)
            return;

        //check if user attempts to use forbidden characters
        if(!Util.checkInput(name))
            return;

        //add it to the database
        try {
            stmt.executeUpdate("INSERT INTO accounting_categories VALUES ("
                    + "'"+name+"'"
                    + ")");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //update list model
        updateListModel();
    }//GEN-LAST:event_addCategory

    private void deleteCategory(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCategory
        //get selected category
        String category = (String)list.getSelectedValue();

        if(category == null) {
            JOptionPane.showMessageDialog(this, "Keine Kategorie zum Löschen"
                    + " ausgewählt.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //confirm deletion
        int option = JOptionPane.showConfirmDialog(this, "<html>Wenn Sie eine"
                + " Kategorie löschen,"
                + " wird diese in der graphischen<p>Oberfläche nicht mehr"
                + " verfügbar sein. Einträge, die dieser<p>"
                + " Kategorie zugeordnet sind, bleiben aber gültig und sind weiterhin"
                + " <p>dieser Kategorie zugeordnet. Sie können dies manuell"
                + " ändern.<br/><br/>"
                + " Möchten Sie die Kategorie löschen?</html>", "Bestätigen",
                JOptionPane.INFORMATION_MESSAGE);
        
        if(option != JOptionPane.YES_OPTION)
            return;

        //remove it
        try {
            stmt.executeUpdate("DELETE FROM accounting_categories WHERE"
                    + " name = '"+category+"'");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //update list model
        updateListModel();
    }//GEN-LAST:event_deleteCategory

    private void editCategory(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editCategory
        if(evt.getClickCount() != 2 || evt.getButton() != MouseEvent.BUTTON1)
            return;

        //get category to be edited
        String category = (String)list.getSelectedValue();

        if(category == null) {
            JOptionPane.showMessageDialog(this, "Keine Kategorie zum Löschen"
                    + " ausgewählt.", "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //let user enter new name
        String newCategory = JOptionPane.showInputDialog(this, "Neuer Name der"
                + " Kategorie:", "", JOptionPane.QUESTION_MESSAGE);
        if(newCategory == null)
            return;

        //check if user attempts to use forbidden characters
        if(!Util.checkInput(newCategory))
            return;

        //update database
        try {
            stmt.executeUpdate("UPDATE accounting_categories SET name = '"+
                    newCategory+"' WHERE name = '"+category+"'");

            stmt.executeUpdate("UPDATE accounting SET category = '"+
                    newCategory+"' WHERE category = '"+category+"'");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //update list model
        updateListModel();
    }//GEN-LAST:event_editCategory

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategoryButton;
    private javax.swing.JButton deleteCategoryButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list;
    // End of variables declaration//GEN-END:variables

    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    Connection dbcon;
    Statement stmt;

    DefaultListModel listModel;
    Frame parent;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Reflects the state of the 'accounting_categories' table in the list.
     */
    private void updateListModel() {

        //generate empty model
        listModel = new DefaultListModel();
        list.setModel(listModel);

        //fill it with database content
        try {
            ResultSet categories = stmt.executeQuery("SELECt name FROM accounting_"
                    + "categories");
            while(categories.next())
                listModel.addElement(categories.getString("name"));
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    //============================INNER CLASSES===============================//
}
