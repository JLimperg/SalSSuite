/*
 * CompanyEditingDialog.java
 *
 * Created on 10.05.2010, 20:59:16
 */

package salssuite.server.module.gui;

import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import salssuite.util.Employee;
import salssuite.util.Util;
import salssuite.util.gui.ExceptionDisplayDialog;

/**
 * Lets the user edit or create a company. This dialog reflects one line of
 * the 'companies' table in the general database.
 * See {@link salssuite.server.Server#buildServerDatabase} for the table structure.
 * @author Jannis Limperg
 */
public class CompanyEditingDialog extends javax.swing.JDialog {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor. If an existing company should be edited,
     * you can pass its ID to the dialog, otherwise just pass <code>-1</code>.
     * @param parent This dialog's parent frame.
     * @param companyID The ID of the company to be edited, or <code>-1</code> if
     * a new one should be created.
     * @param databaseConnection A connection to the database
     * holding the 'companies' table.
     * @param modal Whether this dialog should be modal or not.
     * @see salssuite.server.Server#buildServerDatabase
     */
    public CompanyEditingDialog(java.awt.Frame parent, boolean modal, int companyID,
            Connection databaseConnection) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        this.companyID = companyID;
        this.parent = parent;
        dbcon = databaseConnection;

        try {
        stmt = dbcon.createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Konnte keine Verbindung mit" +
                    " der Datenbank herstellen.", "Netzwerkfehler",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        if(companyID < 0) {
            setTitle("SalSSuite - Neuen Betrieb erstellen");
            IDInput.setText("auto");
            employeeList.setModel(listModel);
            return;
        }

        setTitle("SalSSuite - Betrieb bearbeiten");

        try {
            ResultSet company = stmt.executeQuery("SELECT * FROM companies " +
                    "WHERE id = "+companyID);
            company.next();

            Statement stmt2 = dbcon.createStatement();

            ResultSet boss = stmt2.executeQuery("SELECT id, surname, forename," +
                    " salary FROM citizens WHERE companyId = "+companyID+" AND" +
                    " isBoss = 1");

            if(!boss.next()) {
                JOptionPane.showMessageDialog(parent, "Chef der Firma nicht gefunden."
                        , "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
                dispose();
                return;
            }

            IDInput.setText(""+company.getInt("id"));
            jobsInput.setText(""+company.getInt("jobs"));
            founderIDInput.setText(""+boss.getInt("id"));
            founderNameDisplay.setText("("+boss.getString("forename")+" "+
                    boss.getString("surname")+")");
            founderSalaryInput.setText(""+boss.getDouble("salary"));
            nameInput.setText(company.getString("name"));
            roomInput.setText(company.getString("room"));
            productDescriptionInput.setText(company.getString("productDescription"));

            employeeList.setModel(listModel);

            ResultSet employees = stmt2.executeQuery("SELECT id, forename, surname," +
                    "salary FROM citizens WHERE companyId = "+companyID+" AND isBoss" +
                    " = 0");

            while(employees.next()) {
                String descr = "";
                descr += employees.getInt("id")+ " | ";
                descr += employees.getString("forename") + " ";
                descr += employees.getString("surname") + " | ";
                descr += employees.getDouble("salary");
                listModel.addElement(descr);
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Zu bearbeitende Firma nicht" +
                    " gefunden.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            dispose();
            return;
        }
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        IDInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        roomInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        founderIDInput = new javax.swing.JTextField();
        founderNameDisplay = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeList = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        founderSalaryInput = new javax.swing.JTextField();
        currencyLabel = new javax.swing.JLabel();
        addEmloyeeButton = new javax.swing.JButton();
        deleteEmployeeButton = new javax.swing.JButton();
        editEmployeeButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        approveButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        productDescriptionInput = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jobsInput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Firma bearbeiten");

        jLabel1.setText("Name");

        nameInput.setToolTipText("Der Name des Betriebs.");

        jLabel2.setText("Nummer");

        IDInput.setEditable(false);
        IDInput.setText("auto");
        IDInput.setToolTipText("ID des Betriebs. Kann nicht modifiziert werden.");
        IDInput.setEnabled(false);

        jLabel3.setText("Raum");

        roomInput.setToolTipText("Der Raum, in dem der Betrieb sich befindet.");

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel4.setText("Firma");

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        jLabel5.setText("Gründer");

        jLabel6.setText("Nummer");

        founderIDInput.setToolTipText("Die ID des Firmengründers.");
        founderIDInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                founderIDTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("DejaVu Sans", 1, 13));
        jLabel8.setText("Mitarbeiter");

        employeeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        employeeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editEmployee_list(evt);
            }
        });
        jScrollPane1.setViewportView(employeeList);

        jLabel10.setText("Lohn");

        founderSalaryInput.setToolTipText("Der Tageslohn des Gründers.");

        addEmloyeeButton.setText("hinzufügen");
        addEmloyeeButton.setToolTipText("Einen Mitarbeiter zur Mitarbeiterliste hinzufügen.");
        addEmloyeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployee(evt);
            }
        });

        deleteEmployeeButton.setText("löschen");
        deleteEmployeeButton.setToolTipText("Den ausgewählten Mitarbeiter löschen");
        deleteEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployee(evt);
            }
        });

        editEmployeeButton.setText("bearbeiten");
        editEmployeeButton.setToolTipText("Den ausgewählten Mitarbeiter bearbeiten.");
        editEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEmployee_button(evt);
            }
        });

        cancelButton.setText("Abbrechen");
        cancelButton.setToolTipText("Abbrechen und zur Firmenverwaltung zurückkehren.");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel(evt);
            }
        });

        jLabel7.setText("Mitarbeiter");

        approveButton.setText("Absenden");
        approveButton.setToolTipText("Die Firma speichern.");
        approveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approve(evt);
            }
        });

        jLabel9.setText("Produktbeschreibung");

        productDescriptionInput.setToolTipText("Eine kurze Beschreibung der Produkte, die der Betrieb anbietet.");

        jLabel11.setText("maximale Anzahl Angestellte (inkl. Gründer)");

        jobsInput.setToolTipText("Anzahl der Angestellten, die dieser Betrieb maximal beschäftigen kann, inklusive Gründer.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                        .addGap(75, 75, 75))
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel6)
                .addContainerGap(468, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addGap(451, 451, 451))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(addEmloyeeButton))
                            .addComponent(cancelButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(approveButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(editEmployeeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                .addComponent(deleteEmployeeButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel10)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(founderSalaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currencyLabel))
                            .addComponent(founderIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(IDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(founderNameDisplay)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(24, 24, 24)
                                        .addComponent(roomInput, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(productDescriptionInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobsInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(IDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(roomInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(productDescriptionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(founderIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(founderNameDisplay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(founderSalaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyLabel))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jobsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(addEmloyeeButton)
                    .addComponent(deleteEmployeeButton)
                    .addComponent(editEmployeeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(approveButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel4, jLabel5, jLabel9});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void founderIDTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_founderIDTyped
        int ID;

        //get his ID
        try {
            ID = Integer.parseInt(founderIDInput.getText());
        }
        catch(NumberFormatException e){
            founderNameDisplay.setText("(ungültige Eingabe)");
            return;
        }

        //get name if possible

        try {
            ResultSet boss = stmt.executeQuery("SELECT forename, surname FROM" +
                    " citizens WHERE id = "+ID);

            if(!boss.next())
                founderNameDisplay.setText("(nicht gefunden)");
            else
                founderNameDisplay.setText("("+boss.getString("forename")+" "+
                        boss.getString("surname")+")");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation" +
                    " mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_founderIDTyped

    private void editEmployee_list(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editEmployee_list
        if(evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2)
            editEmployee();
    }//GEN-LAST:event_editEmployee_list

    private void editEmployee_button(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEmployee_button
        editEmployee();
    }//GEN-LAST:event_editEmployee_button

    private void addEmployee(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployee
        //get new Employee
        Employee newEmpl = EmployeeEditingDialog.showEmployeeEditingDialog(parent,
                true, null, dbcon);

        if(newEmpl == null)
            return;

        //test if he happens to be the founder
        Employee founder = parseFounder();
        if(founder.getID() == newEmpl.getID()) {
            JOptionPane.showMessageDialog(parent, "Neuer Angestellter darf " +
                    "nicht der Gründer sein.", "Eingabefehler",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        //test if he's already in the list
        for(int ct = 0; ct < listModel.size(); ct++) {
            String descr = (String)listModel.getElementAt(ct);

            if(descr == null)
                continue;

            String ID = descr.split("\\|")[0].trim();
            if(ID.equals(""+newEmpl.getID())) {
                JOptionPane.showMessageDialog(parent, "Angestellter bereits in " +
                        "der Liste.", "Eingabefehler",
                    JOptionPane.ERROR_MESSAGE);
            return;
            }
        }


        //add to list of employees
        String descr = "";
        descr += newEmpl.getID()+ " | ";
        descr += newEmpl.getForename() + " ";
        descr += newEmpl.getSurname() + " | ";
        descr += newEmpl.getSalary();
        listModel.addElement(descr);
    }//GEN-LAST:event_addEmployee

    private void deleteEmployee(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployee

        String descr = (String)employeeList.getSelectedValue();
        if(descr == null || descr.equals("ID | Name | Gehalt")) {
            JOptionPane.showMessageDialog(this, "Kein Angestellter zum Löschen" +
                    " ausgewählt.", "Ungültige Eingabe", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //get ID
        int ID;
        String IDString = descr.split(" ")[0].trim();
        ID = Integer.parseInt(IDString);

        //set database accordingly
        try {
            stmt.executeUpdate("UPDATE citizens SET companyId = -1 WHERE " +
                    "id = "+ID);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //remove employee from the list
        listModel.removeElement(descr);
    }//GEN-LAST:event_deleteEmployee

    private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
        dispose();
    }//GEN-LAST:event_cancel

    private void approve(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approve
        if(parseInput())
            dispose();
    }//GEN-LAST:event_approve

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDInput;
    private javax.swing.JButton addEmloyeeButton;
    private javax.swing.JButton approveButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel currencyLabel;
    private javax.swing.JButton deleteEmployeeButton;
    private javax.swing.JButton editEmployeeButton;
    private javax.swing.JList employeeList;
    private javax.swing.JTextField founderIDInput;
    private javax.swing.JLabel founderNameDisplay;
    private javax.swing.JTextField founderSalaryInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jobsInput;
    private javax.swing.JTextField nameInput;
    private javax.swing.JTextField productDescriptionInput;
    private javax.swing.JTextField roomInput;
    // End of variables declaration//GEN-END:variables

    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    Connection dbcon;
    Statement stmt;

    DefaultListModel listModel = new DefaultListModel();
    String currency;
    int companyID;
    java.awt.Frame parent;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Shows a <code>CompanyEditingDialog</code> to create or edit a company.
     * Note that all communication with the database is done by the dialog
     * itself.
     * @param parent The dialog's parent frame.
     * @param modal Whether this dialog should be modal or not.
     * @param databaseConnection A connection to the general database
     * holding the 'companies' table.
     * @param companyID The ID of a new company, if one should be created. If
     * a company should be modified, pass a negative number here.
     * @see salssuite.server.Server#buildServerDatabase
     */
    public static void showCompanyEditingDialog(java.awt.Frame parent, boolean modal,
            int companyID, Connection databaseConnection) {

        CompanyEditingDialog dia = new CompanyEditingDialog(parent, modal,
                companyID,databaseConnection);

        dia.setVisible(true);
    }

    /**
     * Parses the input typed by the user and updates the database. Prints error
     * messages if the input is invalid. If not, the database is updated using
     * the new data.
     * @return true if successful, false if not.
     */
    private boolean parseInput() {

        int ID;

        if(IDInput.getText().equals("auto"))
            ID = -1;
        else
            ID = Integer.parseInt(IDInput.getText());


        int jobs;
        try {
            jobs = Integer.parseInt(jobsInput.getText());
            if(jobs <= 0)
                throw new NumberFormatException();

            int ct = 0;
            while(ct < listModel.getSize()+1)
                ct++;

            if(jobs < ct)
                jobs = ct;
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "<html>Bitte positive ganze Zahl in"
                    + " das Feld<br/>für die Anzahl der Angestellten eingeben.</html>",
                    "Eingabefehler", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        String name = nameInput.getText();
        String room = roomInput.getText();
        String productDescription = productDescriptionInput.getText();

        if(!Util.checkInput(name) || !Util.checkInput(room) ||
                !Util.checkInput(productDescription))
            return false;

        Employee boss = parseFounder();
        if(boss == null) {
            return false;
        }

        //add everything to the database
        try {
            if(companyID < 0) { //meaning a new company should be created
                stmt.executeUpdate("INSERT INTO companies (name, room," +
                        "productDescription, jobs) VALUES (" +
                        "'"+name + "', " +
                        "'"+room + "', " +
                        "'"+productDescription + "'," +
                        jobs +
                        ")");
                //get ID of recently created company
                ResultSet company = stmt.executeQuery("SELECT id FROM " +
                        "companies WHERE name = '"+name+"' AND room = '"+room+"' " +
                        "AND productDescription = '"+productDescription+"'");
                company.next();
                ID = company.getInt("id");
            }
            else {
                stmt.executeUpdate("UPDATE companies SET " +
                        "name = '" + name + "', " +
                        "room = '" + room + "', " +
                        "productDescription = '" + productDescription + "'," +
                        "jobs = " + jobs +
                        " WHERE id = "+ID);
            }

            //remove all employees this company previously had
            stmt.executeUpdate("UPDATE citizens SET companyId = -1, isBoss =" +
                    " 0, salary = 0 WHERE companyId = "+ID);

            //add employees it has now
            stmt.executeUpdate("UPDATE citizens SET companyId = "+ID+"," +
                    " isBoss = 1, salary = "+boss.getSalary()+" WHERE id = "
                    +boss.getID());

            for(int ct = 0; ct < listModel.getSize(); ct++) {
                String descr = (String)listModel.getElementAt(ct);

                if(descr == null)
                    continue;

                int emplID = Integer.parseInt(descr.split("\\|")[0].trim());
                double salary = Double.parseDouble(descr.split("\\|")[2].trim());

                stmt.executeUpdate("UPDATE citizens SET companyId = "+ID+", " +
                        "salary = "+salary+", " +
                        "isBoss = 0" +
                        "WHERE id = "+emplID);
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return false;
        }

        return true;
    }

    /**
     * Parses all data concerning the company's founder. In case of failure
     * prints out error messages automatically.
     * @return The parsed founder as an Employee, or null if there was an error.
     */
    private Employee parseFounder() {
        int ID;
        double salary;
        Employee founder;
        
        //get his ID and salary
        try {
            ID = Integer.parseInt(founderIDInput.getText());
            salary = Double.parseDouble(founderSalaryInput.getText());
        }
        catch(NumberFormatException e){
            return null;
        }

        //get name if possible

        try {
            ResultSet boss = stmt.executeQuery("SELECT forename, surname," +
                    " form FROM citizens WHERE id = "+ID);

            if(!boss.next()) {
                JOptionPane.showMessageDialog(this, "Angegebener " +
                "Betriebsgründer nicht gefunden.", "Ungültige Eingabe",
                JOptionPane.ERROR_MESSAGE);
                return null;
            }
            else {
                founder = new Employee(ID, boss.getString("forename"),
                        boss.getString("surname"), boss.getString("form"), salary);
                return founder;
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return null;
        }        
    }

    /**
     * Permits the user to edit the currently selected employee from the list
     * of employees.
     */
    private void editEmployee() {
        //get selected employee
        String descr = (String)employeeList.getSelectedValue();
        int emplIndex = listModel.indexOf(descr);

        if(descr == null || descr.equals("ID | Name | Gehalt")) {
            return;
        }

        int ID;
        double salary;
        try {
            ID = Integer.parseInt(descr.split(" ")[0].trim());
            salary = Double.parseDouble(descr.split("\\|")[2].trim());
        }
        catch(NumberFormatException e) {
            e.printStackTrace();
            new ExceptionDisplayDialog(null, true, e, "Interner Datenfehler")
                    .setVisible(true);
            return;
        }

        Employee currentEmpl;
        try {
            ResultSet citizen = stmt.executeQuery("SELECT forename, surname," +
                    "form FROM citizens WHERE id = "+ID);
            if(!citizen.next()) {
                JOptionPane.showMessageDialog(parent, "Zu bearbeitender Angestellter" +
                        " nicht gefunden.", "Datenfehler", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            currentEmpl = new Employee(ID, citizen.getString("forename"),
                    citizen.getString("surname"), citizen.getString("form"),
                    salary);

        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }


        //edit him
        Employee tmpEmployee = EmployeeEditingDialog.showEmployeeEditingDialog(null,
                true, currentEmpl, dbcon);

        if(tmpEmployee != null) {
            String newDescr = "";
                newDescr += tmpEmployee.getID()+" | ";
                newDescr += tmpEmployee.getForename() + " ";
                newDescr += tmpEmployee.getSurname() + " | ";
                newDescr += tmpEmployee.getSalary();
                listModel.set(emplIndex, newDescr);
        }
    }

    //============================INNER CLASSES===============================//
}
