/*
 * DutyModulePanel.java
 *
 * Created on 24.02.2010, 15:56:47
 */

package salssuite.server.module.gui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import salssuite.util.gui.FilterPanel;
import salssuite.util.Util;

/**
 * GUI for the {@link salssuite.server.module.DutyModule}. This GUI is of minor
 * importance compared to the output created by this module; it is mostly included
 * for the sake of completeness.
 * <p>
 * The user can choose, using a {@link salssuite.util.gui.FilterPanel}, the log
 * events of which user and of which date should be displayed. A list of these
 * is then printed out. This panel also provides a button to log out all citizens.
 * <p>
 * For a general description of the module's purpose and mechanisms, see
 * {@link salssuite.server.module.DutyModule its documentation}.
 * @author Jannis Limperg
 */
public class DutyModulePanel extends javax.swing.JPanel {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor.
     * @param dbcon A connection to the server's database.
     */
    public DutyModulePanel(Connection dbcon) {
        this.dbcon = dbcon;
        initComponents();
        tableModel = (DefaultTableModel)table.getModel();

        try {
            parent = (JFrame)getTopLevelAncestor();
        }
        catch(ClassCastException e) {parent = new JFrame();}
        

        //add filtering panel
        try {
        filterPanel = new FilterPanel(parent,
                    730,
                    dbcon,
                    new String[] {"citizenId, date, time, type"},
                    "logs",
                    "date, citizenId",
                    new String[] {}, //string fields
                    new String[] {"citizenId"}, //number fields
                    new String[] {"date"}, //date fields
                    new String[] {}, //string field descr
                    new String[] {"ID"}, //number field descr
                    new String[] {"Datum"}  //date field descr
                );
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Konnte keine Verbindung mit der" +
                    " Datenbank herstellen. Beende die Anwendung.",
                    "Kritischer Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(1);
            return;
        }

        filterPanel.addActionListener(new ActionListener() {
           public void actionPerformed(ActionEvent ev) {
               inputSent();
           }
        });

        filterPanelPlaceholder.setLayout(new BorderLayout());
        filterPanelPlaceholder.add(filterPanel, BorderLayout.CENTER);

        //update GUI
        filterPanel.clearFilters();
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "serial"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        filterPanelPlaceholder = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(750, 500));

        jScrollPane1.setToolTipText("");

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bürger-ID", "Datum", "Uhrzeit", "Typ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        filterPanelPlaceholder.setPreferredSize(new java.awt.Dimension(710, 136));

        javax.swing.GroupLayout filterPanelPlaceholderLayout = new javax.swing.GroupLayout(filterPanelPlaceholder);
        filterPanelPlaceholder.setLayout(filterPanelPlaceholderLayout);
        filterPanelPlaceholderLayout.setHorizontalGroup(
            filterPanelPlaceholderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 726, Short.MAX_VALUE)
        );
        filterPanelPlaceholderLayout.setVerticalGroup(
            filterPanelPlaceholderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
        );

        jButton2.setText("Alle Bürger ausloggen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logAllOut(evt);
            }
        });

        jButton1.setText("Aktualisieren");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadData(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterPanelPlaceholder, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 458, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanelPlaceholder, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void logAllOut(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logAllOut

        //let the user confirm the action
        int option = JOptionPane.showConfirmDialog(parent,
                "<html>Sollen wirklich alle derzeit eingeloggten Bürger ausgeloggt"
                + " werden?<p>Diese Aktion kann nicht rückgängig gemacht werden.</html>",
                "Ausloggen bestätigen",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if(option != JOptionPane.YES_OPTION)
            return;

        try {
            //for the following operations we need special statements
            Statement stmt1 = dbcon.createStatement();
            Statement stmt2 = dbcon.createStatement(
                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                    ResultSet.CONCUR_READ_ONLY);

            //get all citizens
            ResultSet citizens = stmt1.executeQuery("SELECT id FROM citizens");

            //log them out
            while(citizens.next()) {

                int ID = citizens.getInt("id");
                ResultSet logs = stmt2.executeQuery("SELECT type FROM logs WHERE" +
                        " citizenId = "+ID);

                if(!logs.next()) //meaning no logging activity for this citizen
                    continue;

                logs.last();
                if(logs.getInt("type") == 1) {
                    stmt2.executeUpdate("INSERT INTO logs VALUES (" +
                            ID + ", "+
                            "'"+Util.getDateString()+"', "+
                            "'"+Util.getTimeString()+"', "+
                            "0"+
                            ")");
                }
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //display success message
        JOptionPane.showMessageDialog(parent, "Alle Bürger ausgeloggt.",
                "Erfolg", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_logAllOut

    private void reloadData(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadData
        filterPanel.clearFilters();
    }//GEN-LAST:event_reloadData


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel filterPanelPlaceholder;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    //==========================================================================
    //================================OWN CODE==================================

    //================================FIELDS====================================

    Connection dbcon;
    JFrame parent;
    
    FilterPanel filterPanel;
    DefaultTableModel tableModel;

    //================================METHODS===================================

    /**
     * Constructs a visual representation of the data filtered by the user.
     */
    private void inputSent() {

        ResultSet data = filterPanel.getFilteredData();
        
        tableModel.setRowCount(0);

        //create new data
        try {
            while(data.next()) {

                String date = data.getString("date");
                String time = data.getString("time");
                int ID = data.getInt("citizenId");

                String type;
                if(data.getInt("type") == 0)
                    type = "logout";
                else
                    type = "login";

                tableModel.addRow(new Object[]{
                    ID, date, time, type
                });
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }
}
