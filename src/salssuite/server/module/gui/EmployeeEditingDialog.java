/*
 * EmployeeEditingDialog.java
 *
 * Created on 11.05.2010, 18:08:53
 */

package salssuite.server.module.gui;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import salssuite.util.Employee;
import javax.swing.JOptionPane;

/**
 * Lets the user choose an employee and their salary. It is meant to be used by
 * the {@link CompanyEditingDialog} to add/remove employees to/from a company.
 * @author Jannis Limperg
 */
public class EmployeeEditingDialog extends javax.swing.JDialog {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor. Can be used to modify or add an employee.
     * @param parent This dialog's parent frame.
     * @param modal Whether the dialog should be modal or not.
     * @param databaseConnection A connection to the database
     * holding the 'citizens' table.
     * @param employee The employee who is to be modified. If a new employee
     * should be created, just pass <code>null</code> here.
     * @see salssuite.server.Server#buildServerDatabase
     */
    public EmployeeEditingDialog(java.awt.Frame parent, boolean modal, Employee
            employee, Connection databaseConnection) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);

        //set up database connection
        dbcon = databaseConnection;
        try {
            stmt = dbcon.createStatement();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(parent, "Konnte nicht mit Datenbank verbinden.",
                    "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            employee = null;
            dispose();
            return;
        }
        this.parent = parent;

        this.employee = employee;

        //if a new employee should be added
        if(employee == null) {
            setTitle("SalSSuite - Neuen Angestellten hinzufügen");
            return;
        }

        //else if an existing employee should be modified
        setTitle("SalSSuite - Angestellten bearbeiten");

        IDInput.setText(""+this.employee.getID());
        salaryInput.setText(""+this.employee.getSalary());
        IDEntered(null);

        try {
            setLocation(
                    (int)(parent.getLocation().getX()+(parent.getSize().getWidth()/2)),
                    (int)(parent.getLocation().getY()+(parent.getSize().getHeight()/2)));
        }
        catch(Exception e){}
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        IDInput = new javax.swing.JTextField();
        nameDisplay = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        salaryInput = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nummer");

        IDInput.setToolTipText("Die ID des Mitarbeiters.");
        IDInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approve(evt);
            }
        });
        IDInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                IDEntered(evt);
            }
        });

        jLabel2.setText("Gehalt");

        salaryInput.setToolTipText("Das Gehalt des neuen Mitarbeiters, in fiktiver Währung.");
        salaryInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approve(evt);
            }
        });

        cancelButton.setText("Abbrechen");
        cancelButton.setToolTipText("Die Aktion abbrechen.");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel(evt);
            }
        });

        jButton1.setText("Absenden");
        jButton1.setToolTipText("Mitarbeiter hinzufügen.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approve(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(IDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(nameDisplay))
                            .addComponent(salaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 262, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameDisplay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(salaryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void approve(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approve

        //parse input
        int ID;
        double salary;

        try {
            ID = Integer.parseInt(IDInput.getText());
            salary = Double.parseDouble(salaryInput.getText());

            if(ID <= 0 || salary < 0)
                throw new NumberFormatException();
        }
        catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Bitte positive Zahlen eingeben.",
                    "Ungültige Eingabe", JOptionPane.ERROR_MESSAGE);
            employee = null;
            return;
        }

        //get additional data
        try {
            ResultSet citizen = stmt.executeQuery("SELECT forename, surname, form" +
                    " FROM citizens WHERE id = "+ID);

            if(citizen.next()) {
                employee = new Employee(ID, citizen.getString("forename"),
                        citizen.getString("surname"), citizen.getString("form"),
                        salary);
                dispose();
                return;
            }

            else {
                JOptionPane.showMessageDialog(this, "Konnte keinen Bürger mit gegebener " +
                    "ID finden.", "Ungültige Eingabe", JOptionPane.ERROR_MESSAGE);
                employee = null;
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation " +
                    "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_approve

    private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
        employee = null;
        dispose();
    }//GEN-LAST:event_cancel

    private void IDEntered(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IDEntered
        //get ID
        int ID;

        try {
            ID = Integer.parseInt(IDInput.getText());
        }
        catch(NumberFormatException e) {
            nameDisplay.setText("(ungültige Eingabe)");
            return;
        }

        //get name
        try {
            ResultSet citizen = stmt.executeQuery("SELECT forename, surname " +
                    "FROM citizens WHERE id = "+ID);

            if(!citizen.next())
                nameDisplay.setText("(nicht gefunden)");
            else
                nameDisplay.setText("("+citizen.getString("forename")+" "+
                        citizen.getString("surname")+")");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(parent, "Fehler bei der Kommunikation "
                    + "mit der Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
    }//GEN-LAST:event_IDEntered

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDInput;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel nameDisplay;
    private javax.swing.JTextField salaryInput;
    // End of variables declaration//GEN-END:variables

    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    Employee employee;

    Connection dbcon;
    Statement stmt;
    java.awt.Frame parent;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Returns the employee currently entered by the user.
     * @return The new or edit employee; or <code>null</code> if the user has
     * cancelled.
     */
    public Employee getEmployee() {
        return employee;
    }

    /**
     * Displays an <code>EmployeeEditingDialog</code> and
     * returns the user input.
     * @param parent The dialog's parent frame.
     * @param modal Whether the dialog should be modal or not.
     * @param employee The employee to be edited. If a new employee should be
     * created, pass <code>null</code> here.
     * @param databaseConnection A connection to the database
     * holding the 'citizens' table.
     * @return The new employee, or <code>null</code> if the user has cancelled.
     * @see salssuite.server.Server#buildServerDatabase
     */
    public static Employee showEmployeeEditingDialog(java.awt.Frame parent,
            boolean modal, Employee employee, Connection databaseConnection) {

        EmployeeEditingDialog dia = new EmployeeEditingDialog(parent, modal,
                employee, databaseConnection);
        dia.setVisible(true);

        return dia.getEmployee();
    }

    //============================INNER CLASSES===============================//
}
