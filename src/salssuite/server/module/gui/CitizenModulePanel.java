/*
 * CitizenModulePanel.java
 *
 * Created on 02.11.2010, 00:32:33
 */

package salssuite.server.module.gui;

import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import salssuite.util.Util;
import salssuite.util.gui.FilterPanel;

/**
 * GUI for the {@link salssuite.server.module.CitizenModule}. This panel
 * lets the user edit the citizens stored in the general server database
 * (table 'citizens').
 * <p>
 * The panel displays a <code>JTable</code> which exactly reflects the database
 * table. The user can edit all values except for IDs, add and remove citizens.
 * @author Jannis Limperg
 * @see salssuite.server.Server#buildServerDatabase
 */
public class CitizenModulePanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     * @param dbcon A connection to the server database.
     */
    public CitizenModulePanel(Connection dbcon) {
        initComponents();
        try {
            stmt = dbcon.createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(null, "Fehler bei der Kommunikation mit der"
                    + "Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //generate filter panel
        try {
        filterPanel = new FilterPanel(null,
                    (int)filterPanelPlaceholder.getPreferredSize().getWidth(),
                    dbcon,
                    new String[] {"ID, forename, surname, form, companyId"},
                    "citizens",
                    new String[] {"forename", "surname", "form"}, //string fields
                    new String[] {"ID", "companyId"}, //number fields
                    new String[] {}, //date fields
                    new String[] {"Vorname", "Nachname", "Klasse"}, //string field descr
                    new String[] {"ID", "Betriebs-ID"}, //number field descr
                    new String[] {}  //date field descr
                );
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(null, "Konnte keine Verbindung mit der" +
                    " Datenbank herstellen. Beende die Anwendung.",
                    "Kritischer Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            System.exit(1);
            return;
        }

        filterPanel.addActionListener(new ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent ev) {
               inputSent();
           }
        });

        filterPanelPlaceholder.setLayout(new java.awt.BorderLayout());
        filterPanelPlaceholder.add(filterPanel, java.awt.BorderLayout.CENTER);

        filterPanel.clearFilters();
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        deleteCitizenButton = new javax.swing.JButton();
        filterPanelPlaceholder = new javax.swing.JPanel();
        addCitizenButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(750, 500));
        setLayout(new java.awt.BorderLayout());

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table.setRowSelectionAllowed(false);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(table);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        refreshButton.setText("Aktualisieren");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonPressed(evt);
            }
        });

        deleteCitizenButton.setText("Bürger löschen");
        deleteCitizenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCitizen(evt);
            }
        });

        filterPanelPlaceholder.setLayout(new java.awt.BorderLayout());

        addCitizenButton.setText("Bürger hinzufügen");
        addCitizenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCitizen(evt);
            }
        });

        jLabel1.setText("Zum Bearbeiten eines Wertes auf eine Zelle doppelklicken, Wert eingeben und <Enter> drücken");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterPanelPlaceholder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(68, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(addCitizenButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteCitizenButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                        .addComponent(refreshButton)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanelPlaceholder, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshButton)
                    .addComponent(addCitizenButton)
                    .addComponent(deleteCitizenButton))
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonPressed
        filterPanel.clearFilters();
    }//GEN-LAST:event_refreshButtonPressed

    private void addCitizen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCitizen
        //add to database
        try {
            stmt.executeUpdate("INSERT INTO citizens VALUES ("
                    + "DEFAULT, '', '', '', DEFAULT, DEFAULT, DEFAULT)");
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(null, "Fehler bei der Kommunikation mit der"
                    + "Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //add visual representation
        refreshButtonPressed(null);

        //scroll down to created citizen
        jScrollPane1.getVerticalScrollBar().setValue(
                jScrollPane1.getVerticalScrollBar().getMaximum());
    }//GEN-LAST:event_addCitizen

    private void deleteCitizen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCitizen
        //get ID
        int deleteRow = table.getSelectedRow();
        int ID = Integer.parseInt((String)tableModel.getValueAt(deleteRow, 0));

        //remove from database
        try {
            stmt.executeUpdate("DELETE FROM citizens WHERE id = "+ID);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + "Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //update visual representation
        refreshButtonPressed(null);
    }//GEN-LAST:event_deleteCitizen


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCitizenButton;
    private javax.swing.JButton deleteCitizenButton;
    private javax.swing.JPanel filterPanelPlaceholder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables


    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//
    
    Statement stmt;

    FilterPanel filterPanel;
    DefaultTableModel tableModel;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Generates a new table model according to the data filtered by the
     * filterPanel.
     */
    private void inputSent() {
        //fetch information from filter panel
        ResultSet data = filterPanel.getFilteredData();

        //construct empty table model
        tableModel = new DefaultTableModel(new String[]
        {"ID", "Vorname", "Nachname", "Klasse", "Betriebs-Nr."}, 0) {
            private static final long serialVersionUID = 1;
            @Override
            public boolean isCellEditable(int row, int column) {
                if(column == 0 || column == 4)
                    return false;
                return true;
            }
        };
        tableModel.addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent evt) {
                if(evt.getType() == TableModelEvent.INSERT ||
                   evt.getType() == TableModelEvent.DELETE)
                    return;
                cellUpdated(evt.getFirstRow(), evt.getColumn());
            }
        });
        table.setModel(tableModel);

        //fill the model
        try {
            while(data.next()) {
                String[] row = new String[5];
                row[0] = data.getString("id");
                row[1] = data.getString("forename");
                row[2] = data.getString("surname");
                row[3] = data.getString("form");
                row[4] = data.getString("companyId");

                tableModel.addRow(row);
            }
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(null, "Fehler bei der Kommunikation mit der"
                    + "Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    /**
     * Reacts to a cell update by the user. This method updates the database
     * according to the user input.
     * @param row The row of the modified cell.
     * @param column The column of the modified cell.
     */
    private void cellUpdated(int row, int column) {
        //get ID of edited citizen
        int ID = Integer.parseInt((String)tableModel.getValueAt(row, 0));

        //get new value
        String newValue = (String)tableModel.getValueAt(row, column);

        //check if user attempts to use any prohibited characters
        if(!Util.checkInput(newValue))
            return;

        //update database
        try {
            if(column == 1) //forename change
                stmt.executeUpdate("UPDATE citizens SET forename = '"+newValue+
                        "' WHERE id = "+ID);
            else if(column == 2) //surname change
                stmt.executeUpdate("UPDATE citizens SET surname = '"+newValue+
                        "' WHERE id = "+ID);
            else if(column == 3) //form change
                stmt.executeUpdate("UPDATE citizens SET form = '"+newValue+
                        "' WHERE id = "+ID);
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + "Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    //============================INNER CLASSES===============================//
}
