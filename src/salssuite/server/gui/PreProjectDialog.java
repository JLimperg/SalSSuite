/*
 * PreProjectDialog.java
 *
 * Created on 09.02.2010, 18:45:09
 */

/*
 *  SalSSuite - Suite of programmes for managing a SalS project
 *  Copyright (C) 2011  Jannis Limperg <jannis[dot]limperg[at]arcor[dot]de>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package salssuite.server.gui;

import java.awt.event.WindowAdapter;
import java.io.File;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import salssuite.util.Constants;

/**
 * Asks the user whether they want to (a) start a new project,
 * (b) continue with the last project, or (c) continue with yet another project.
 * <p>
 * Which option has been chosen and, if applicable, where the project definition
 * file is located, can be evaluated using the appropriate methods.
 * <p>
 * The client itself remembers which project was opened last time using a
 * {@link java.util.prefs.Preferences} node.
 * @author Jannis Limperg
 * @version 1.0
 */
public class PreProjectDialog extends javax.swing.JDialog {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor.
     * @param parent This dialog's parent frame.
     * @param modal Whether this dialog is modal to <code>parent</code> or not.
     */
    public PreProjectDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        if(parent != null) {
            setLocation(parent.getX()+(parent.getWidth()/2), parent.getY()+
                    (parent.getHeight()/2));
        }
        else {
            setLocation(Constants.serverSetupDialogNode.getInt("window.x", 200),
                    Constants.serverSetupDialogNode.getInt("window.y", 200));
        }

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Constants.preProjectDialogNode.putInt("window.x", getX());
                Constants.preProjectDialogNode.putInt("window.y", getY());
            }
        });
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        continueLastButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        continueOtherButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Projekt");

        continueLastButton.setText("Letztes Projekt");
        continueLastButton.setToolTipText("Führt das letzte geöffnete Projekt weiter");
        continueLastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastProject(evt);
            }
        });

        newButton.setText("Neues Projekt");
        newButton.setToolTipText("Erstellt ein neues Projekt");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProject(evt);
            }
        });

        continueOtherButton.setText("Projekt öffnen");
        continueOtherButton.setToolTipText("Öffnet ein bestehendes Projekt.");
        continueOtherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueOther(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(continueLastButton)
                .addGap(18, 18, 18)
                .addComponent(newButton)
                .addGap(18, 18, 18)
                .addComponent(continueOtherButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(continueLastButton)
                    .addComponent(newButton)
                    .addComponent(continueOtherButton))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void continueOther(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueOther
        JFileChooser chooser = new JFileChooser(
                new File(new File(Constants.preProjectDialogNode.get(
                "data.programmeDir", System.getProperty("user.dir"))), "/Projekte/"));
        chooser.setMultiSelectionEnabled(false);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Projekt weiterführen");

        if(!(chooser.showDialog(this, "Öffnen") == JFileChooser.APPROVE_OPTION))
            return;

        projectDef = chooser.getSelectedFile();
        optionChosen = CONTINUE_OTHER;
        node.put("data.lastProj", projectDef.getAbsolutePath());
        dispose();
    }//GEN-LAST:event_continueOther

    private void newProject(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProject
        optionChosen = NEW_PROJECT;
        projectDef = null;
        dispose();
    }//GEN-LAST:event_newProject

    private void lastProject(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastProject

        if(node.get("data.lastProj", "").equals("")) {
           JOptionPane.showMessageDialog(this, "Konnte letztes Projekt nicht finden.",
                   "Fehler beim Öffnen des Projekts", JOptionPane.ERROR_MESSAGE);
           projectDef = null;
           continueOther(null);
           return;
        }

        projectDef = new File(node.get("data.lastProj", ""));

        if(!projectDef.exists()) {
            JOptionPane.showMessageDialog(this, "Fehler: Definitionsdatei für " +
                    "letztes Projekt ("+projectDef.getAbsolutePath()+") nicht " +
                    "gefunden.", "Fehler beim Öffnen des Projekts", JOptionPane.
                    ERROR_MESSAGE);
            projectDef = null;
            continueOther(null);
            return;
        }

        optionChosen = CONTINUE_LAST;
        dispose();
    }//GEN-LAST:event_lastProject

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continueLastButton;
    private javax.swing.JButton continueOtherButton;
    private javax.swing.JButton newButton;
    // End of variables declaration//GEN-END:variables


    //=================================OWN CODE=================================


                                        //CONSTANTS
    /**
     * Constant for use with {@link #getChosenOption}. This option indicates
     * that a new project should be started.
     */
    public static final int NEW_PROJECT = 1;
    /**
     * Constant for use with {@link #getChosenOption}. This option indicates
     * that the last opened project should be continued.
     */
    public static final int CONTINUE_LAST = 2;
    /**
     * Constant for use with {@link #getChosenOption}. This option indicates
     * that the user wants to specify a project definition file by himself.
     */
    public static final int CONTINUE_OTHER = 3;

                                        //FIELDS
    File projectDef;
    int optionChosen;

    Preferences node = Constants.preProjectDialogNode;

                                        //METHODS

    /**
     * Shows a <code>PreProjectDialog</code> and returns the chosen file,
     * or <code>null</code> if the dialog was disposed irregularly.
     * @param parent The parent frame of this dialog.
     * @param modal Whether this dialog should be modal or not.
     * @return The definition file of the chosen project, or <code>null</code>
     * if the dialog was closed irregularly.
     */
    public static File showPreProjectDialog(java.awt.Frame parent, boolean modal) {
        PreProjectDialog dia = new PreProjectDialog(parent, modal);
        dia.setVisible(true);
        return dia.getProjectDefinitionFile();
    }


    //GETTER

    /**
     * Returns this project's definition file.
     * @return The project definition file.
     */
    public File getProjectDefinitionFile() {
        return projectDef;
    }

    /**
     * Returns the option chosen by the user. It is one of
     * <ul>
     * <li>Create a new project</li>
     * <li>Continue the last project</li>
     * <li>Continue another project</li>
     * </ul>
     * Which option was chosen can be determined using
     * {@link #NEW_PROJECT}, {@link #CONTINUE_LAST} and {@link #CONTINUE_OTHER}.
     * @return The chosen option.
     */
    public int getChosenOption() {
        return optionChosen;
    }


}//end class
