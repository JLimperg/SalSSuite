/*
 * ServerPanel.java
 *
 * Created on 18.02.2010, 20:14:42
 */

/*
 *  SalSSuite - Suite of programmes for managing a SalS project
 *  Copyright (C) 2011  Jannis Limperg <jannis[dot]limperg[at]arcor[dot]de>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package salssuite.server.gui;

import javax.swing.JOptionPane;
import salssuite.util.gui.ExceptionDisplayDialog;
import salssuite.server.Server;
import java.util.LinkedList;

/**
 * The server's main panel. This panel is meant to be used as a GUI for general
 * server settings in the <code>ServerGUI</code>. The user can use it to
 * <ul>
 * <li>change the project settings</li>
 * <li>manage the SalSSuite accounts</li>
 * <li>make a backup</li>
 * <li>generate output</li>
 * <li>shut down the server</li>
 * <li>save the server data</li>
 * </ul>
 * <p>
 * See {@link salssuite.server.Server} for details on the server's
 * abilities.
 * @author Jannis Limperg
 * @version 1.0.1
 * @see salssuite.server.Project
 */
public class ServerPanel extends javax.swing.JPanel {

    private static final long serialVersionUID=1;

    /**
     * Sole constructor.
     * @param server The server which this <code>ServerPanel</code> manages.
     * @throws ClassCastException if the top level ancestor returned by
     * {@link #getTopLevelAncestor} is not a <code>JFrame</code>.
     */
    public ServerPanel(Server server) {
        initComponents();
        this.server = server;
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jButton1.setText("Projekt bearbeiten");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editProject(evt);
            }
        });

        jButton2.setText("Herunterfahren");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdown(evt);
            }
        });

        jButton3.setText("Daten speichern");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAll(evt);
            }
        });

        jButton4.setText("Backup anlegen");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeBackup(evt);
            }
        });

        jButton5.setText("Output generieren");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeOutput(evt);
            }
        });

        jButton6.setText("Benutzer verwalten");
        jButton6.setToolTipText("Ã„ndert das Serverpasswort");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageAccounts(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(140, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(319, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void shutdown(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdown

        try {
            server.makeOutput();
            server.shutdown();
          }
          catch(Exception e) {
              server.writeToErrorLog("LAUNCHER: Failed to create output!");
              new ExceptionDisplayDialog(server.getGUI(), true, e, "KONNTE OUTPUT NICHT" +
                      " ERSTELLEN",30).setVisible(true);
              System.exit(1);
          }
          server.writeToLog("LAUNCHER: Server shutdown complete. No errors.");
          server.writeToErrorLog("LAUNCHER: Server shutdown complete. No errors.");
          System.exit(0);
    }//GEN-LAST:event_shutdown

    private void saveAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAll
        try {
            server.saveData();
        }
        catch(Exception e) {
            new ExceptionDisplayDialog(server.getGUI(), true, e, "KONNTE SERVER-" +
                      "DATEN NICHT SPEICHERN",30).setVisible(true);
            return;
        }
        JOptionPane.showMessageDialog(server.getGUI(), "Daten gespeichert.",
                "Erfolg", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_saveAll

    private void makeOutput(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeOutput
        try {
            server.makeOutput();
        }
        catch(Exception e) {
            new ExceptionDisplayDialog(server.getGUI(), true, e, "", 30).setVisible(true);
            return;
        }
        JOptionPane.showMessageDialog(server.getGUI(), "Output erstellt.",
                "Erfolg", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_makeOutput

    private void editProject(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editProject
        server.changeProject(server.getGUI());
    }//GEN-LAST:event_editProject

    private void makeBackup(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeBackup
        try {
            server.makeBackup();
        }
        catch(Exception e) {
            new ExceptionDisplayDialog(server.getGUI(), true, e, "KONNTE BACKUP" +
                    " NICHT ERSTELLEN", 30).setVisible(true);
            return;
        }
        JOptionPane.showMessageDialog(server.getGUI(), "Backup erstellt.",
                "Erfolg", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_makeBackup

    private void manageAccounts(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageAccounts
        LinkedList<String> moduleNames = new LinkedList<String>();
        for(salssuite.server.module.Module module : server.getModules())
            moduleNames.add(module.getName());

        new AccountManagingGUI(server.getDatabaseConnection(),
                moduleNames.toArray(new String[0])).setVisible(true);
    }//GEN-LAST:event_manageAccounts


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    // End of variables declaration//GEN-END:variables


    //===================================OWN CODE===============================

    //FIELDS
    Server server;
}
