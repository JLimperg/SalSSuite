/*
 * AccountEditingDialog.java
 *
 * Created on 12.12.2010, 05:16:19
 */

/*
 *  SalSSuite - Suite of programmes for managing a SalS project
 *  Copyright (C) 2011  Jannis Limperg <jannis[dot]limperg[at]arcor[dot]de>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.

 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package salssuite.server.gui;

import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Dialog for changing the permissions one account is granted. Permissions
 * usually correspond to modules, which means that with the permissions for
 * the duty module, one can access both its server panel and client.
 * <p>
 * Using this dialog, the user is presented a list of all modules and can determine
 * which modules the user whose permissions are to be edited may access.
 * @author Jannis Limperg
 * @version 1.0.1
 * @see salssuite.server.Server
 * @see AccountManagingGUI
 */
public class AccountEditingDialog extends javax.swing.JDialog {

    private static final long serialVersionUID = 1;

    /**
     * Sole constructor.
     * @param parent This dialog's parent frame.
     * @param modal Whether this dialog should be modal or not.
     * @param modules A list of module names. The name of a module can be
     * determined using <code>themodule.getName()</code> or
     * <code>themodule.NAME</code>, which should be equivalent.
     * @param dbcon A connection to the database in which the 'accounts'
     * and 'permissions' tables are stored.
     * @param username The username of the account of which the permissions
     * should be modified.
     * @see salssuite.server.Server#buildServerDatabase
     */
    public AccountEditingDialog(java.awt.Frame parent, boolean modal,
            String[] modules, Connection dbcon, String username) {
        super(parent, modal);
        initComponents();
        this.username = username;
        this.modules = modules;
        this.dbcon = dbcon;

        //connect to the database
        try {
            stmt = dbcon.createStatement();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                    + " Datenbank", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        //build the GUI
        usernameDisplay.setText(username);
        buildPermissionPanel();

        //usability
        setLocationRelativeTo(parent);
    }

    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        usernameDisplay = new javax.swing.JLabel();
        permissionPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(448, 50));

        jLabel1.setText("Benutzer:");

        usernameDisplay.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(usernameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usernameDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        permissionPanel.setLayout(new java.awt.GridLayout(5, 1));
        getContentPane().add(permissionPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel permissionPanel;
    private javax.swing.JLabel usernameDisplay;
    // End of variables declaration//GEN-END:variables

    //========================================================================//
    //=============================OWN CODE===================================//
    //========================================================================//

    //==============================CONSTANTS=================================//

    //===============================FIELDS===================================//

    String username;
    String[] modules;

    Connection dbcon;
    Statement stmt;

    //============================CONSTRUCTORS================================//

    //==============================METHODS===================================//

    /**
     * Builds a panel for each module in the given list of active modules. Using
     * this panel, the user can grant or forbid access to the module for the
     * specified user.
     */
    private void buildPermissionPanel() {

        for(final String module : modules) {

            //components of the module permission panel
            JPanel modulePanel = new JPanel();
            modulePanel.setLayout(new GridLayout(1, 2));

            JPanel buttonPanel = new JPanel();
            JPanel displayPanel = new JPanel();

            JLabel moduleNameDisplay = new JLabel(module);
            displayPanel.add(moduleNameDisplay);

            JCheckBox permitted = new JCheckBox("erlaubt");

            //Set initial state of the 'permitted' checkbox according to whether
            //the user is currently permitted to access the module or not.
            try {
                ResultSet perm = stmt.executeQuery("SELECT username FROM permissions"
                        + " WHERE username = '"+username+"' AND module = '"+
                        module+"'");
                if(perm.next())
                    permitted.setSelected(true);
                else
                    permitted.setSelected(false);
            }
            catch(SQLException e) {
                JOptionPane.showMessageDialog(this, "Fehler bei der Kommunikation mit der"
                        + " Datenbank.", "Netzwerkfehler", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
                return;
            }

            //Add action listeners to automatically adjust the database data
            //according to the permissions chosen in the GUI if the latter is
            //changed.
            permitted.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    try {
                        if(((JCheckBox)evt.getSource()).isSelected())
                            stmt.executeUpdate("INSERT INTO permissions VALUES"
                                    + " ('"+module+"', '"+username+"')");
                        else
                            stmt.executeUpdate("DELETE FROM permissions WHERE"
                                    + " username = '"+username+"' AND module = '"
                                    +module+"'");
                    }
                    catch(SQLException e) {
                        JOptionPane.showMessageDialog(null, "Fehler bei der "
                                + "Kommunikation mit der"
                                + " Datenbank.", "Netzwerkfehler",
                                JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                        return;
                    }
                }
            });

            buttonPanel.add(permitted);
            modulePanel.add(displayPanel);
            modulePanel.add(buttonPanel);

            permissionPanel.add(modulePanel);
        }
        pack();
    }

    //============================INNER CLASSES===============================//
}
